syntax = "proto3";
package sifnode.ethbridge.v1;

import "gogoproto/gogo.proto";
import "sifnode/ethbridge/v1/types.proto";
import "sifnode/oracle/v1/network_descriptor.proto";

option go_package = "github.com/Sifchain/sifnode/x/ethbridge/types";

// Msg service for messages
service Msg {
  rpc Lock(MsgLock) returns (MsgLockResponse);
  rpc Burn(MsgBurn) returns (MsgBurnResponse);
  rpc CreateEthBridgeClaim(MsgCreateEthBridgeClaim)
      returns (MsgCreateEthBridgeClaimResponse);
  rpc UpdateWhiteListValidator(MsgUpdateWhiteListValidator)
      returns (MsgUpdateWhiteListValidatorResponse);
  rpc UpdateNativeTokenReceiverAccount(MsgUpdateNativeTokenReceiverAccount)
      returns (MsgUpdateNativeTokenReceiverAccountResponse);
  rpc RescueNativeToken(MsgRescueNativeToken)
      returns (MsgRescueNativeTokenResponse);
  rpc SetNativeToken(MsgSetNativeToken) returns (MsgSetNativeTokenResponse);
  rpc SignProphecy(MsgSignProphecy) returns (MsgSignProphecyResponse);
}

// MsgLock defines a message for locking coins and triggering a related event
message MsgLock {
  string cosmos_sender = 1;
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount\""
  ];
  string symbol = 3 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 4
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  string ethereum_receiver = 5
      [ (gogoproto.moretags) = "yaml:\"ethereum_receiver\"" ];
  string native_token_amount = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"native_token_amount\""
  ];
}

message MsgLockResponse {}

// MsgBurn defines a message for burning coins and triggering a related event
message MsgBurn {
  string cosmos_sender = 1 [ (gogoproto.moretags) = "yaml:\"cosmos_sender\"" ];
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount\""
  ];
  string symbol = 3 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 4
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  string ethereum_receiver = 5
      [ (gogoproto.moretags) = "yaml:\"ethereum_receiver\"" ];
  string native_token_amount = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"native_token_amount\""
  ];
}

message MsgBurnResponse {}

message MsgCreateEthBridgeClaim {
  EthBridgeClaim eth_bridge_claim = 1
      [ (gogoproto.moretags) = "yaml:\"eth_bridge_claim\"" ];
}

message MsgCreateEthBridgeClaimResponse {}

// MsgUpdateWhiteListValidator add or remove validator from whitelist
message MsgUpdateWhiteListValidator {
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 1
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  string cosmos_sender = 2 [ (gogoproto.moretags) = "yaml:\"cosmos_sender\"" ];
  string validator = 3 [ (gogoproto.moretags) = "yaml:\"validator\"" ];
  uint32 power = 4;
}

message MsgUpdateWhiteListValidatorResponse {}

message MsgUpdateNativeTokenReceiverAccount {
  string cosmos_sender = 1;
  string native_token_receiver_account = 2;
}

message MsgUpdateNativeTokenReceiverAccountResponse {}

message MsgRescueNativeToken {
  string cosmos_sender = 1;
  string cosmos_receiver = 2;
  string native_token_symbol = 3;
  string native_token_amount = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgRescueNativeTokenResponse {}

message MsgSetNativeToken {
  string cosmos_sender = 1;
  sifnode.oracle.v1.NetworkDescriptor network_descriptor = 2
      [ (gogoproto.moretags) = "yaml:\"network_descriptor\"" ];
  string native_token = 3;
  string native_gas = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"native_gas\""
  ];
  string minimum_lock_cost = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"minimum_lock_cost\""
  ];
  string minimum_burn_cost = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"minimum_burn_cost\""
  ];
}

message MsgSetNativeTokenResponse {}

// MsgSignProphecy defines a message for sending signature for prophecy
message MsgSignProphecy {
  string cosmos_sender = 1;
  string prophecy_id = 2;
  string ethereum_address = 3;
  string signature = 4;
}

message MsgSignProphecyResponse {}
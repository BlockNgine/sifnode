digraph evmnative {
  compound=true
  subgraph clustereth {
    label="EVM Blockchain"
  token [shape=rectangle, label="Erc20 Token Contract", height=1, width=1]
  bridgebank [shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Bridge Bank</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="lock">Lock()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">Burn()</TD>
  </TR>
</TABLE>>]
  cosmosbridge [shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Cosmos Bridge</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="submit">submitProphecyClaimAggregatedSigs()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="submitBatch">submitBatchProphecyClaimAggregatedSigs()</TD>
  </TR>
</TABLE>>]
  }
  subgraph clustersif {
    label="Sifchain Blockchain"
    bank [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Bank Module</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="mint">MintCoins()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">BurnCoins()</TD>
  </TR>
      <TR>
    <TD BGCOLOR="lightgray" PORT="toModule">SendCoinsFromAccountToModule()</TD>
  </TR>
      <TR>
    <TD BGCOLOR="lightgray" PORT="fromModule">SendCoinsFromModuleToAccount()</TD>
  </TR>
</TABLE>
    >]
    ethbridge [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>EthBridge Module</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="lock">Lock()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">Burn()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="setEthNonce">SetEthereumLockBurnSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="getEthNonce">GetEthereumLockBurnSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="updateNonce">UpdateGlobalSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="getNonce">GetGlobalSequence()</TD>
  </TR>
</TABLE>
    >]
        oracle [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Oracle Module</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="claim">ProcessClaim()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="getTransaction">GetProphecyInfoWithScopeGlobalSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="setTransaction">SetGlobalNonceProphecyID()</TD>
  </TR>
</TABLE>
    >]
        metadata [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Token Registry Module</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="add">AddTokenMetadata()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="get">GetTokenMetadata()</TD>
  </TR>
 <TR>
    <TD BGCOLOR="lightgray" PORT="addIBC">AddIBCTokenMetadata()</TD>
  </TR>
     <TR>
    <TD BGCOLOR="lightgray" PORT="isIBC">IsIBCToken()</TD>
  </TR>
</TABLE>
    >]
  }  relayer [shape=Mcircle, label="Relayer"]
  witness [shape=Mcircle, label="Witness"]
  user [shape=Mdiamond, label="User"]
  ethClaim [shape=none, label=<
  <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>EthBridgeClaim</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="network">Network Descriptor</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="sequence">EVM Sequence Number</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="denom">DenomHash</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="value">Value</TD>
  </TR>
</TABLE>
  >]

  user -> token [label=" transfer to bridgebank", labelloc="l"]
  user -> bridgebank:lock
  bridgebank:lock -> relayer [label=" logLock Event", ltail=clustereth]
  bridgebank:lock -> witness [label=" logLock Event", ltail=clustereth]
  relayer -> ethClaim [label=" Construct Claim"]
  witness -> ethClaim
  relayer -> ethbridge:getEthNonce [label=" Get last sequence on wakeup", dir=both]
  relayer -> ethbridge:setEthNonce [label=" Update sequence after claim"]
  witness -> ethbridge:getEthNonce [label=" Get last sequence on wakeup", dir=both]
  witness -> ethbridge:setEthNonce [label=" Update sequence after claim"]
  ethClaim -> oracle:claim [label=" Broadcast transaction to sifnode"]
  oracle:claim -> metadata:add
  oracle:claim -> bank:mint
}

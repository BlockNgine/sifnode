digraph evmnative {
  compound=true
  subgraph clusterevm1 {
    label="EVM Blockchain #1"
  token1 [shape=rectangle, label="Erc20 Token Contract", height=1, width=1]
  bridgebank1 [shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Bridge Bank</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="lock">Lock()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">Burn()</TD>
  </TR>
</TABLE>>]
  cosmosbridge1 [shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Cosmos Bridge</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="submit">submitProphecyClaimAggregatedSigs()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="submitBatch">submitBatchProphecyClaimAggregatedSigs()</TD>
  </TR>
</TABLE>>]
  }
    subgraph clusterevm2 {
    label="EVM Blockchain #2"
  token2 [shape=rectangle, label="Erc20 Token Contract", height=1, width=1]
  bridgebank2 [shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Bridge Bank</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="lock">Lock()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">Burn()</TD>
  </TR>
</TABLE>>]
  cosmosbridge2 [shape=none, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Cosmos Bridge</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="submit">submitProphecyClaimAggregatedSigs()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="submitBatch">submitBatchProphecyClaimAggregatedSigs()</TD>
  </TR>
</TABLE>>]
  }
  subgraph clustersif {
    label="Sifchain Blockchain"
    bank [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Bank Module</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="mint">MintCoins()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">BurnCoins()</TD>
  </TR>
      <TR>
    <TD BGCOLOR="lightgray" PORT="toModule">SendCoinsFromAccountToModule()</TD>
  </TR>
      <TR>
    <TD BGCOLOR="lightgray" PORT="fromModule">SendCoinsFromModuleToAccount()</TD>
  </TR>
</TABLE>
    >]
    ethbridge [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>EthBridge Module</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="lock">Lock()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="burn">Burn()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="setEthNonce">SetEthereumLockBurnSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="getEthNonce">GetEthereumLockBurnSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="updateNonce">UpdateGlobalSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="getNonce">GetGlobalSequence()</TD>
  </TR>
</TABLE>
    >]
        oracle [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Oracle Module</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="claim">ProcessClaim()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="getTransaction">GetProphecyInfoWithScopeGlobalSequence()</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="setTransaction">SetGlobalNonceProphecyID()</TD>
  </TR>
</TABLE>
    >]
        metadata [shape=none, label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>Token1 Registry Module</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="add">AddToken1Metadata()</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="get">GetToken1Metadata()</TD>
  </TR>
 <TR>
    <TD BGCOLOR="lightgray" PORT="addIBC">AddIBCToken1Metadata()</TD>
  </TR>
     <TR>
    <TD BGCOLOR="lightgray" PORT="isIBC">IsIBCToken1()</TD>
  </TR>
</TABLE>
    >]
  }  relayer [shape=Mcircle, label="Relayer"]
  witness [shape=Mcircle, label="Witness"]
  user [shape=Mdiamond, label="User"]
  ethClaim [shape=none, label=<
  <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>EthBridgeClaim</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="network">Network Descriptor</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="sequence">EVM Sequence Number</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="denom">DenomHash</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="value">Value</TD>
  </TR>
</TABLE>
  >]
  sifClaim [shape=none, label=<
  <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
  <TR>
    <TD>ProphecyInfo</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="network">Prophecy Id</TD>
  </TR>
  <TR>
  <TD BGCOLOR="lightgray" PORT="sequence">Cosmos Sender</TD>
  </TR>
  <TR>
    <TD BGCOLOR="lightgray" PORT="denom">Cosmos Sequence Number</TD>
  </TR>
    <TR>
    <TD BGCOLOR="lightgray" PORT="value">EVM Reciever</TD>
  </TR>
      <TR>
    <TD BGCOLOR="lightgray" PORT="value">Token Denom Hash</TD>
  </TR>    
  <TR>
    <TD BGCOLOR="lightgray" PORT="value">Token Contract Address</TD>
  </TR>    
  <TR>
    <TD BGCOLOR="lightgray" PORT="value">Token Amount</TD>
  </TR>
      <TR>
    <TD BGCOLOR="lightgray" PORT="value">EVM Signatures</TD>
  </TR>
</TABLE>
  >]

 // Peg Into Sifnode
  user -> token1 [label=" transfer to bridgebank", labelloc="l"]
  user -> bridgebank1:lock
  bridgebank1:lock -> relayer [label=" logLock Event", ltail=clusterevm1]
  bridgebank1:lock -> witness [label=" logLock Event", ltail=clusterevm1]
  relayer -> ethClaim [label=" Construct Claim"]
  witness -> ethClaim
  relayer -> ethbridge:getEthNonce [label=" Get last sequence on wakeup", dir=both]
  relayer -> ethbridge:setEthNonce [label=" Update sequence after claim"]
  witness -> ethbridge:getEthNonce [label=" Get last sequence on wakeup", dir=both]
  witness -> ethbridge:setEthNonce [label=" Update sequence after claim"]
  ethClaim -> oracle:claim [label=" Broadcast transaction to sifnode"]
  oracle:claim -> metadata:add
  oracle:claim -> bank:mint

  // Double Peg into other Chain
  user -> ethbridge:burn [label="User initiates burn"]
  ethbridge:burn -> bank:burn [label="Ethbridge burns coins" ]
  ethbridge -> witness [label="LogBurnEvent is emited", ltail="clustersif"]
  witness -> ethbridge:getNonce [label="On wakeup get sequence", dir=both]
  witness -> sifClaim [label="Construct Prophecy Claim" ]
  sifClaim -> oracle:setTransaction [label="Store signed claim into virtual mempool" ]
  relayer -> ethbridge:getNonce [label="On wakeup get sequence", dir=both]
  relayer -> oracle:getTransaction [label="Get latest claim to transmit", dir=both]
  relayer -> cosmosbridge2:submitBatch [label="Transmit signed claim to cosmos bridge" ]
  relayer -> ethbridge:setNonce [label="After transmiting claim, update sequence number"]
  cosmosbridge2-> bridgebank2 [label="Request minting of asset"]
  bridgebank2 -> token2 [label="Deploy and/or mint bridge tokens"]

}

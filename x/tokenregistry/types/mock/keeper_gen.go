// Code generated by MockGen. DO NOT EDIT.
// Source: ../expected_keepers.go

// Package tokenregistrymocks is a generated GoMock package.
package tokenregistrymocks

import (
	reflect "reflect"

	types "github.com/Sifchain/sifnode/x/oracle/types"
	types0 "github.com/Sifchain/sifnode/x/tokenregistry/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
	types3 "github.com/tendermint/tendermint/abci/types"
	log "github.com/tendermint/tendermint/libs/log"
)

// MockKeeper is a mock of Keeper interface.
type MockKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperMockRecorder
}

// MockKeeperMockRecorder is the mock recorder for MockKeeper.
type MockKeeperMockRecorder struct {
	mock *MockKeeper
}

// NewMockKeeper creates a new mock instance.
func NewMockKeeper(ctrl *gomock.Controller) *MockKeeper {
	mock := &MockKeeper{ctrl: ctrl}
	mock.recorder = &MockKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeper) EXPECT() *MockKeeperMockRecorder {
	return m.recorder
}

// AddIBCTokenMetadata mocks base method.
func (m *MockKeeper) AddIBCTokenMetadata(ctx types1.Context, metadata types0.TokenMetadata, cosmosSender types1.AccAddress) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIBCTokenMetadata", ctx, metadata, cosmosSender)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddIBCTokenMetadata indicates an expected call of AddIBCTokenMetadata.
func (mr *MockKeeperMockRecorder) AddIBCTokenMetadata(ctx, metadata, cosmosSender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIBCTokenMetadata", reflect.TypeOf((*MockKeeper)(nil).AddIBCTokenMetadata), ctx, metadata, cosmosSender)
}

// AddTokenMetadata mocks base method.
func (m *MockKeeper) AddTokenMetadata(ctx types1.Context, metadata types0.TokenMetadata) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTokenMetadata", ctx, metadata)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddTokenMetadata indicates an expected call of AddTokenMetadata.
func (mr *MockKeeperMockRecorder) AddTokenMetadata(ctx, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTokenMetadata", reflect.TypeOf((*MockKeeper)(nil).AddTokenMetadata), ctx, metadata)
}

// CheckDenomPermissions mocks base method.
func (m *MockKeeper) CheckDenomPermissions(ctx types1.Context, denom string, permissions []types0.Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDenomPermissions", ctx, denom, permissions)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckDenomPermissions indicates an expected call of CheckDenomPermissions.
func (mr *MockKeeperMockRecorder) CheckDenomPermissions(ctx, denom, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDenomPermissions", reflect.TypeOf((*MockKeeper)(nil).CheckDenomPermissions), ctx, denom, permissions)
}

// ExportGenesis mocks base method.
func (m *MockKeeper) ExportGenesis(ctx types1.Context) *types0.GenesisState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportGenesis", ctx)
	ret0, _ := ret[0].(*types0.GenesisState)
	return ret0
}

// ExportGenesis indicates an expected call of ExportGenesis.
func (mr *MockKeeperMockRecorder) ExportGenesis(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportGenesis", reflect.TypeOf((*MockKeeper)(nil).ExportGenesis), ctx)
}

// GetDenom mocks base method.
func (m *MockKeeper) GetDenom(ctx types1.Context, denom string) types0.RegistryEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenom", ctx, denom)
	ret0, _ := ret[0].(types0.RegistryEntry)
	return ret0
}

// GetDenom indicates an expected call of GetDenom.
func (mr *MockKeeperMockRecorder) GetDenom(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenom", reflect.TypeOf((*MockKeeper)(nil).GetDenom), ctx, denom)
}

// GetDenomWhitelist mocks base method.
func (m *MockKeeper) GetDenomWhitelist(ctx types1.Context) types0.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenomWhitelist", ctx)
	ret0, _ := ret[0].(types0.Registry)
	return ret0
}

// GetDenomWhitelist indicates an expected call of GetDenomWhitelist.
func (mr *MockKeeperMockRecorder) GetDenomWhitelist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenomWhitelist", reflect.TypeOf((*MockKeeper)(nil).GetDenomWhitelist), ctx)
}

// GetFirstLockDoublePeg mocks base method.
func (m *MockKeeper) GetFirstLockDoublePeg(ctx types1.Context, denom string, networkDescriptor types.NetworkDescriptor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstLockDoublePeg", ctx, denom, networkDescriptor)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetFirstLockDoublePeg indicates an expected call of GetFirstLockDoublePeg.
func (mr *MockKeeperMockRecorder) GetFirstLockDoublePeg(ctx, denom, networkDescriptor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstLockDoublePeg", reflect.TypeOf((*MockKeeper)(nil).GetFirstLockDoublePeg), ctx, denom, networkDescriptor)
}

// GetTokenMetadata mocks base method.
func (m *MockKeeper) GetTokenMetadata(ctx types1.Context, denomHash string) (types0.TokenMetadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenMetadata", ctx, denomHash)
	ret0, _ := ret[0].(types0.TokenMetadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTokenMetadata indicates an expected call of GetTokenMetadata.
func (mr *MockKeeperMockRecorder) GetTokenMetadata(ctx, denomHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenMetadata", reflect.TypeOf((*MockKeeper)(nil).GetTokenMetadata), ctx, denomHash)
}

// InitGenesis mocks base method.
func (m *MockKeeper) InitGenesis(ctx types1.Context, state types0.GenesisState) []types3.ValidatorUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGenesis", ctx, state)
	ret0, _ := ret[0].([]types3.ValidatorUpdate)
	return ret0
}

// InitGenesis indicates an expected call of InitGenesis.
func (mr *MockKeeperMockRecorder) InitGenesis(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGenesis", reflect.TypeOf((*MockKeeper)(nil).InitGenesis), ctx, state)
}

// IsAdminAccount mocks base method.
func (m *MockKeeper) IsAdminAccount(ctx types1.Context, adminAccount types1.AccAddress) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdminAccount", ctx, adminAccount)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdminAccount indicates an expected call of IsAdminAccount.
func (mr *MockKeeperMockRecorder) IsAdminAccount(ctx, adminAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdminAccount", reflect.TypeOf((*MockKeeper)(nil).IsAdminAccount), ctx, adminAccount)
}

// IsDenomWhitelisted mocks base method.
func (m *MockKeeper) IsDenomWhitelisted(ctx types1.Context, denom string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDenomWhitelisted", ctx, denom)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDenomWhitelisted indicates an expected call of IsDenomWhitelisted.
func (mr *MockKeeperMockRecorder) IsDenomWhitelisted(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDenomWhitelisted", reflect.TypeOf((*MockKeeper)(nil).IsDenomWhitelisted), ctx, denom)
}

// Logger mocks base method.
func (m *MockKeeper) Logger(ctx types1.Context) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger", ctx)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockKeeperMockRecorder) Logger(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockKeeper)(nil).Logger), ctx)
}

// RemoveToken mocks base method.
func (m *MockKeeper) RemoveToken(ctx types1.Context, denom string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveToken", ctx, denom)
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockKeeperMockRecorder) RemoveToken(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockKeeper)(nil).RemoveToken), ctx, denom)
}

// SetAdminAccount mocks base method.
func (m *MockKeeper) SetAdminAccount(ctx types1.Context, adminAccount types1.AccAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAdminAccount", ctx, adminAccount)
}

// SetAdminAccount indicates an expected call of SetAdminAccount.
func (mr *MockKeeperMockRecorder) SetAdminAccount(ctx, adminAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdminAccount", reflect.TypeOf((*MockKeeper)(nil).SetAdminAccount), ctx, adminAccount)
}

// SetFirstLockDoublePeg mocks base method.
func (m *MockKeeper) SetFirstLockDoublePeg(ctx types1.Context, denom string, networkDescriptor types.NetworkDescriptor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFirstLockDoublePeg", ctx, denom, networkDescriptor)
}

// SetFirstLockDoublePeg indicates an expected call of SetFirstLockDoublePeg.
func (mr *MockKeeperMockRecorder) SetFirstLockDoublePeg(ctx, denom, networkDescriptor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstLockDoublePeg", reflect.TypeOf((*MockKeeper)(nil).SetFirstLockDoublePeg), ctx, denom, networkDescriptor)
}

// SetToken mocks base method.
func (m *MockKeeper) SetToken(ctx types1.Context, entry *types0.RegistryEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", ctx, entry)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockKeeperMockRecorder) SetToken(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockKeeper)(nil).SetToken), ctx, entry)
}

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(arg0 types1.Context, arg1 types1.AccAddress) types2.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types2.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), arg0, arg1)
}

// SetModuleAccount mocks base method.
func (m *MockAccountKeeper) SetModuleAccount(arg0 types1.Context, arg1 types2.ModuleAccountI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModuleAccount", arg0, arg1)
}

// SetModuleAccount indicates an expected call of SetModuleAccount.
func (mr *MockAccountKeeperMockRecorder) SetModuleAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModuleAccount", reflect.TypeOf((*MockAccountKeeper)(nil).SetModuleAccount), arg0, arg1)
}

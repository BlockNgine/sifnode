// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/oracle/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StatusText is an enum used to represent the status of the prophecy
type StatusText int32

const (
	// Default value
	StatusText_STATUS_TEXT_UNSPECIFIED StatusText = 0
	// Pending status
	StatusText_STATUS_TEXT_PENDING StatusText = 1
	// Success status
	StatusText_STATUS_TEXT_SUCCESS StatusText = 2
)

var StatusText_name = map[int32]string{
	0: "STATUS_TEXT_UNSPECIFIED",
	1: "STATUS_TEXT_PENDING",
	2: "STATUS_TEXT_SUCCESS",
}

var StatusText_value = map[string]int32{
	"STATUS_TEXT_UNSPECIFIED": 0,
	"STATUS_TEXT_PENDING":     1,
	"STATUS_TEXT_SUCCESS":     2,
}

func (x StatusText) String() string {
	return proto.EnumName(StatusText_name, int32(x))
}

func (StatusText) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{0}
}

type GenesisState struct {
	AddressWhitelist map[uint32]*ValidatorWhiteList `protobuf:"bytes,1,rep,name=address_whitelist,json=addressWhitelist,proto3" json:"address_whitelist,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AdminAddress     string                         `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	Prophecies       []*Prophecy                    `protobuf:"bytes,3,rep,name=prophecies,proto3" json:"prophecies,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAddressWhitelist() map[uint32]*ValidatorWhiteList {
	if m != nil {
		return m.AddressWhitelist
	}
	return nil
}

func (m *GenesisState) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *GenesisState) GetProphecies() []*Prophecy {
	if m != nil {
		return m.Prophecies
	}
	return nil
}

// Claim contains an arbitrary claim with arbitrary content made by a given
// validator
type Claim struct {
	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Content          string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{1}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Claim) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *Claim) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Prophecy is what the prophecy becomes when being saved to the database.
//  Tendermint/Amino does not support maps so we must serialize those variables
//  into bytes.
type Prophecy struct {
	Id              []byte     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          StatusText `protobuf:"varint,2,opt,name=status,proto3,enum=sifnode.oracle.v1.StatusText" json:"status,omitempty"`
	ClaimValidators []string   `protobuf:"bytes,3,rep,name=claim_validators,json=claimValidators,proto3" json:"claim_validators,omitempty"`
}

func (m *Prophecy) Reset()         { *m = Prophecy{} }
func (m *Prophecy) String() string { return proto.CompactTextString(m) }
func (*Prophecy) ProtoMessage()    {}
func (*Prophecy) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{2}
}
func (m *Prophecy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prophecy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prophecy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Prophecy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prophecy.Merge(m, src)
}
func (m *Prophecy) XXX_Size() int {
	return m.Size()
}
func (m *Prophecy) XXX_DiscardUnknown() {
	xxx_messageInfo_Prophecy.DiscardUnknown(m)
}

var xxx_messageInfo_Prophecy proto.InternalMessageInfo

func (m *Prophecy) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Prophecy) GetStatus() StatusText {
	if m != nil {
		return m.Status
	}
	return StatusText_STATUS_TEXT_UNSPECIFIED
}

func (m *Prophecy) GetClaimValidators() []string {
	if m != nil {
		return m.ClaimValidators
	}
	return nil
}

// ValidatorWhiteList is struct that contains validator and its voting power
type ValidatorWhiteList struct {
	WhiteList map[string]uint32 `protobuf:"bytes,1,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ValidatorWhiteList) Reset()         { *m = ValidatorWhiteList{} }
func (m *ValidatorWhiteList) String() string { return proto.CompactTextString(m) }
func (*ValidatorWhiteList) ProtoMessage()    {}
func (*ValidatorWhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{3}
}
func (m *ValidatorWhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorWhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorWhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorWhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorWhiteList.Merge(m, src)
}
func (m *ValidatorWhiteList) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorWhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorWhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorWhiteList proto.InternalMessageInfo

func (m *ValidatorWhiteList) GetWhiteList() map[string]uint32 {
	if m != nil {
		return m.WhiteList
	}
	return nil
}

// CrossChainFeeConfig is crosschain fee config for each network
type CrossChainFeeConfig struct {
	FeeCurrency     string                                 `protobuf:"bytes,1,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	FeeCurrencyGas  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=fee_currency_gas,json=feeCurrencyGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_currency_gas" yaml:"fee_currency_gas"`
	MinimumLockCost github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=minimum_lock_cost,json=minimumLockCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_lock_cost" yaml:"minimum_lock_cost"`
	MinimumBurnCost github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=minimum_burn_cost,json=minimumBurnCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_burn_cost" yaml:"minimum_burn_cost"`
}

func (m *CrossChainFeeConfig) Reset()         { *m = CrossChainFeeConfig{} }
func (m *CrossChainFeeConfig) String() string { return proto.CompactTextString(m) }
func (*CrossChainFeeConfig) ProtoMessage()    {}
func (*CrossChainFeeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{4}
}
func (m *CrossChainFeeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainFeeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainFeeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainFeeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainFeeConfig.Merge(m, src)
}
func (m *CrossChainFeeConfig) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainFeeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainFeeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainFeeConfig proto.InternalMessageInfo

func (m *CrossChainFeeConfig) GetFeeCurrency() string {
	if m != nil {
		return m.FeeCurrency
	}
	return ""
}

// ProphecyInfo include the ethereum addressed and signatures.
type ProphecyInfo struct {
	NetworkDescriptor    NetworkDescriptor                      `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty" yaml:"network_descriptor"`
	BlockNumber          uint64                                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ProphecyId           []byte                                 `protobuf:"bytes,3,opt,name=prophecy_id,json=prophecyId,proto3" json:"prophecy_id,omitempty"`
	CosmosSender         string                                 `protobuf:"bytes,4,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	CosmosSenderSequence uint64                                 `protobuf:"varint,5,opt,name=cosmos_sender_sequence,json=cosmosSenderSequence,proto3" json:"cosmos_sender_sequence,omitempty"`
	EthereumReceiver     string                                 `protobuf:"bytes,6,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty"`
	TokenDenomHash       string                                 `protobuf:"bytes,7,opt,name=token_denom_hash,json=tokenDenomHash,proto3" json:"token_denom_hash,omitempty"`
	TokenAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount" yaml:"token_amount"`
	DoublePeg            bool                                   `protobuf:"varint,9,opt,name=double_peg,json=doublePeg,proto3" json:"double_peg,omitempty"`
	GlobalNonce          uint64                                 `protobuf:"varint,10,opt,name=global_nonce,json=globalNonce,proto3" json:"global_nonce,omitempty"`
	CrosschainFee        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=crosschain_fee,json=crosschainFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"crosschain_fee" yaml:"crosschain_fee"`
	EthereumAddress      []string                               `protobuf:"bytes,12,rep,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Signatures           []string                               `protobuf:"bytes,13,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *ProphecyInfo) Reset()         { *m = ProphecyInfo{} }
func (m *ProphecyInfo) String() string { return proto.CompactTextString(m) }
func (*ProphecyInfo) ProtoMessage()    {}
func (*ProphecyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac1b931484f4203, []int{5}
}
func (m *ProphecyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProphecyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProphecyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProphecyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProphecyInfo.Merge(m, src)
}
func (m *ProphecyInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProphecyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProphecyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProphecyInfo proto.InternalMessageInfo

func (m *ProphecyInfo) GetNetworkDescriptor() NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *ProphecyInfo) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ProphecyInfo) GetProphecyId() []byte {
	if m != nil {
		return m.ProphecyId
	}
	return nil
}

func (m *ProphecyInfo) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *ProphecyInfo) GetCosmosSenderSequence() uint64 {
	if m != nil {
		return m.CosmosSenderSequence
	}
	return 0
}

func (m *ProphecyInfo) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

func (m *ProphecyInfo) GetTokenDenomHash() string {
	if m != nil {
		return m.TokenDenomHash
	}
	return ""
}

func (m *ProphecyInfo) GetDoublePeg() bool {
	if m != nil {
		return m.DoublePeg
	}
	return false
}

func (m *ProphecyInfo) GetGlobalNonce() uint64 {
	if m != nil {
		return m.GlobalNonce
	}
	return 0
}

func (m *ProphecyInfo) GetEthereumAddress() []string {
	if m != nil {
		return m.EthereumAddress
	}
	return nil
}

func (m *ProphecyInfo) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func init() {
	proto.RegisterEnum("sifnode.oracle.v1.StatusText", StatusText_name, StatusText_value)
	proto.RegisterType((*GenesisState)(nil), "sifnode.oracle.v1.GenesisState")
	proto.RegisterMapType((map[uint32]*ValidatorWhiteList)(nil), "sifnode.oracle.v1.GenesisState.AddressWhitelistEntry")
	proto.RegisterType((*Claim)(nil), "sifnode.oracle.v1.Claim")
	proto.RegisterType((*Prophecy)(nil), "sifnode.oracle.v1.Prophecy")
	proto.RegisterType((*ValidatorWhiteList)(nil), "sifnode.oracle.v1.ValidatorWhiteList")
	proto.RegisterMapType((map[string]uint32)(nil), "sifnode.oracle.v1.ValidatorWhiteList.WhiteListEntry")
	proto.RegisterType((*CrossChainFeeConfig)(nil), "sifnode.oracle.v1.CrossChainFeeConfig")
	proto.RegisterType((*ProphecyInfo)(nil), "sifnode.oracle.v1.ProphecyInfo")
}

func init() { proto.RegisterFile("sifnode/oracle/v1/types.proto", fileDescriptor_dac1b931484f4203) }

var fileDescriptor_dac1b931484f4203 = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x4e, 0xe3, 0xc6,
	0x17, 0xc6, 0x61, 0x61, 0xc9, 0x24, 0x64, 0xc3, 0xc0, 0xfe, 0xf0, 0x8f, 0x15, 0x81, 0xba, 0x7f,
	0x44, 0xa9, 0x9a, 0x68, 0xe9, 0xae, 0x54, 0xed, 0xf6, 0x06, 0x42, 0xa0, 0xa9, 0x56, 0x11, 0xb2,
	0xa1, 0xad, 0x5a, 0xa9, 0x96, 0x63, 0x9f, 0x24, 0xd3, 0xd8, 0x33, 0xe9, 0xcc, 0x38, 0x6c, 0xa4,
	0x3e, 0x44, 0x5f, 0xa0, 0xd7, 0x7d, 0x8d, 0x5e, 0xee, 0xe5, 0x5e, 0x56, 0xbd, 0xa0, 0x15, 0xbc,
	0xc1, 0x3e, 0x41, 0xe5, 0x19, 0x3b, 0x18, 0xc2, 0x45, 0x91, 0x7a, 0x95, 0x99, 0xef, 0x7c, 0x73,
	0xce, 0x37, 0xe7, 0x9c, 0x39, 0x31, 0xda, 0x14, 0xa4, 0x47, 0x59, 0x00, 0x0d, 0xc6, 0x3d, 0x3f,
	0x84, 0xc6, 0xf8, 0x69, 0x43, 0x4e, 0x46, 0x20, 0xea, 0x23, 0xce, 0x24, 0xc3, 0x2b, 0xa9, 0xb9,
	0xae, 0xcd, 0xf5, 0xf1, 0xd3, 0x8d, 0xb5, 0x3e, 0xeb, 0x33, 0x65, 0x6d, 0x24, 0x2b, 0x4d, 0xdc,
	0xd8, 0x9d, 0xf5, 0x43, 0x41, 0x9e, 0x33, 0x3e, 0x74, 0x03, 0x10, 0x3e, 0x27, 0x23, 0xc9, 0xb8,
	0xe6, 0x5a, 0xbf, 0x17, 0x50, 0xf9, 0x18, 0x28, 0x08, 0x22, 0x1c, 0xe9, 0x49, 0xc0, 0x5d, 0xb4,
	0xe2, 0x05, 0x01, 0x07, 0x21, 0xdc, 0xf3, 0x01, 0x91, 0x10, 0x12, 0x21, 0x4d, 0x63, 0x7b, 0x7e,
	0xa7, 0xb4, 0xf7, 0xbc, 0x3e, 0xa3, 0xa0, 0x9e, 0x3f, 0x5b, 0xdf, 0xd7, 0x07, 0xbf, 0xc9, 0xce,
	0xb5, 0xa8, 0xe4, 0x13, 0xbb, 0xea, 0xdd, 0x82, 0xf1, 0xfb, 0x68, 0xd9, 0x0b, 0x22, 0x42, 0xdd,
	0xd4, 0x62, 0x16, 0xb6, 0x8d, 0x9d, 0xa2, 0x5d, 0x56, 0x60, 0xea, 0x04, 0xbf, 0x44, 0x68, 0xc4,
	0xd9, 0x68, 0x00, 0x3e, 0x01, 0x61, 0xce, 0x2b, 0x05, 0x4f, 0xee, 0x50, 0x70, 0xa2, 0x49, 0x13,
	0x3b, 0x47, 0xdf, 0xf8, 0x11, 0x3d, 0xbe, 0x53, 0x0c, 0xae, 0xa2, 0xf9, 0x21, 0x4c, 0x4c, 0x63,
	0xdb, 0xd8, 0x59, 0xb6, 0x93, 0x25, 0x7e, 0x89, 0x16, 0xc6, 0x5e, 0x18, 0x83, 0x12, 0x51, 0xda,
	0xfb, 0xf0, 0x8e, 0x10, 0x5f, 0x7b, 0x21, 0x09, 0x3c, 0xc9, 0xb8, 0x72, 0xf6, 0x8a, 0x08, 0x69,
	0xeb, 0x33, 0x2f, 0x0a, 0x9f, 0x1b, 0xd6, 0x0f, 0x68, 0xa1, 0x19, 0x7a, 0x24, 0xc2, 0x15, 0x54,
	0x20, 0x81, 0x72, 0x5d, 0xb4, 0x0b, 0x24, 0xc0, 0x9f, 0xa0, 0x95, 0x71, 0x76, 0xf2, 0xd6, 0x55,
	0xab, 0x53, 0x43, 0x76, 0x5d, 0x13, 0x3d, 0xf4, 0x19, 0x95, 0x40, 0xa5, 0x39, 0xaf, 0x28, 0xd9,
	0xd6, 0xfa, 0x19, 0x2d, 0x65, 0x77, 0xcc, 0x85, 0x28, 0xab, 0x10, 0xcf, 0xd1, 0xa2, 0x90, 0x9e,
	0x8c, 0xb5, 0xdf, 0xca, 0xde, 0xe6, 0x1d, 0xea, 0x1d, 0x45, 0x38, 0x85, 0xd7, 0xd2, 0x4e, 0xc9,
	0xf8, 0x63, 0x54, 0xf5, 0x13, 0xc9, 0xee, 0x54, 0x86, 0xce, 0x70, 0xd1, 0x7e, 0xa4, 0xf0, 0xe9,
	0x85, 0x85, 0xf5, 0x9b, 0x81, 0xf0, 0xec, 0xfd, 0xb1, 0x83, 0x90, 0x6a, 0x0f, 0x37, 0xd7, 0x1f,
	0xcf, 0xfe, 0x55, 0xea, 0xea, 0xd3, 0x95, 0x6e, 0x8f, 0xe2, 0x79, 0xb6, 0xdf, 0xf8, 0x02, 0x55,
	0x6e, 0x1a, 0xf3, 0xe5, 0x2a, 0xea, 0x72, 0xad, 0xe5, 0xcb, 0xb5, 0x9c, 0xaf, 0xc3, 0xaf, 0xf3,
	0x68, 0xb5, 0xc9, 0x99, 0x10, 0xcd, 0x81, 0x47, 0xe8, 0x11, 0x40, 0x93, 0xd1, 0x1e, 0xe9, 0xe3,
	0xf7, 0x50, 0xb9, 0x07, 0xe0, 0xfa, 0x31, 0xe7, 0x40, 0xfd, 0xcc, 0x59, 0xa9, 0x07, 0xd0, 0x4c,
	0x21, 0x2c, 0x50, 0x35, 0x4f, 0x71, 0xfb, 0x5e, 0x5a, 0xa8, 0x83, 0xf6, 0x9b, 0x8b, 0xad, 0xb9,
	0x3f, 0x2f, 0xb6, 0x3e, 0xea, 0x13, 0x39, 0x88, 0xbb, 0x75, 0x9f, 0x45, 0x0d, 0x9f, 0x89, 0x88,
	0x89, 0xf4, 0xe7, 0x53, 0x11, 0x0c, 0xd3, 0x67, 0xda, 0xa6, 0xf2, 0xdd, 0xc5, 0xd6, 0xfa, 0xc4,
	0x8b, 0xc2, 0x17, 0xd6, 0x6d, 0x7f, 0x96, 0x5d, 0xc9, 0x45, 0x3c, 0xf6, 0x04, 0x1e, 0xa3, 0x95,
	0x88, 0x50, 0x12, 0xc5, 0x91, 0x1b, 0x32, 0x7f, 0xe8, 0xfa, 0x4c, 0xa4, 0xb5, 0x3f, 0xf8, 0xea,
	0xde, 0x51, 0x4d, 0x1d, 0x75, 0xc6, 0xa1, 0x65, 0x3f, 0x4a, 0xb1, 0x57, 0xcc, 0x1f, 0x36, 0x99,
	0x90, 0xf9, 0xb8, 0xdd, 0x98, 0x53, 0x1d, 0xf7, 0xc1, 0x7f, 0x13, 0x77, 0xea, 0xf0, 0x3a, 0xee,
	0x41, 0xcc, 0x69, 0x12, 0xd7, 0xfa, 0x6b, 0x01, 0x95, 0xb3, 0x46, 0x6e, 0xd3, 0x1e, 0xc3, 0x1c,
	0xe1, 0xd9, 0xb9, 0xa4, 0xca, 0x53, 0xd9, 0xfb, 0xe0, 0x8e, 0x5e, 0xea, 0x68, 0xf2, 0xe1, 0x94,
	0x7b, 0xb0, 0xf9, 0xee, 0x62, 0xeb, 0xff, 0x5a, 0xc1, 0xac, 0x27, 0xcb, 0x5e, 0xa1, 0xb7, 0x4f,
	0x24, 0xcd, 0xd0, 0x55, 0xc9, 0xa1, 0x71, 0xd4, 0x05, 0xae, 0xaa, 0xfc, 0xc0, 0x2e, 0x29, 0xac,
	0xa3, 0x20, 0xbc, 0x85, 0x4a, 0xe9, 0x24, 0x99, 0xb8, 0x24, 0x50, 0x15, 0x29, 0x4f, 0x87, 0xcb,
	0xa4, 0x1d, 0x24, 0xe3, 0x4b, 0x67, 0xc3, 0x15, 0x40, 0x03, 0xe0, 0x3a, 0x79, 0x76, 0x59, 0x83,
	0x8e, 0xc2, 0xf0, 0x33, 0xf4, 0xbf, 0x1b, 0x24, 0x57, 0xc0, 0x4f, 0x31, 0x50, 0x1f, 0xcc, 0x05,
	0x15, 0x72, 0x2d, 0xcf, 0x76, 0x52, 0x5b, 0x32, 0x32, 0x40, 0x0e, 0x80, 0x43, 0x1c, 0xb9, 0x1c,
	0x7c, 0x20, 0x63, 0xe0, 0xe6, 0xa2, 0x1e, 0x19, 0x99, 0xc1, 0x4e, 0x71, 0xbc, 0x83, 0xaa, 0x92,
	0x0d, 0x81, 0xba, 0x01, 0x50, 0x16, 0xb9, 0x03, 0x4f, 0x0c, 0xcc, 0x87, 0x8a, 0x5b, 0x51, 0xf8,
	0x61, 0x02, 0x7f, 0xe9, 0x89, 0x01, 0x1e, 0xa0, 0xb2, 0x66, 0x7a, 0x11, 0x8b, 0xa9, 0x34, 0x97,
	0x54, 0xb5, 0x5b, 0xf7, 0xae, 0xf6, 0xaa, 0xce, 0x75, 0xde, 0x97, 0x65, 0x97, 0xd4, 0x76, 0x5f,
	0xed, 0xf0, 0x26, 0x42, 0x01, 0x8b, 0xbb, 0x21, 0xb8, 0x23, 0xe8, 0x9b, 0xc5, 0x6d, 0x63, 0x67,
	0xc9, 0x2e, 0x6a, 0xe4, 0x04, 0xd4, 0x5b, 0xec, 0x87, 0xac, 0xeb, 0x85, 0x2e, 0x65, 0x49, 0x2e,
	0x90, 0x4e, 0xbf, 0xc6, 0x3a, 0x09, 0x84, 0x29, 0xaa, 0xf8, 0xc9, 0x2b, 0xf6, 0x93, 0x57, 0xec,
	0xf6, 0x00, 0xcc, 0x92, 0x52, 0x7b, 0x7c, 0x6f, 0xb5, 0x8f, 0xb5, 0xda, 0x9b, 0xde, 0x2c, 0x7b,
	0xf9, 0x1a, 0x38, 0x02, 0x48, 0x66, 0xe1, 0x34, 0xe5, 0xd9, 0x90, 0x2e, 0xeb, 0x59, 0x98, 0xe1,
	0xd9, 0x8c, 0xae, 0x21, 0x24, 0x48, 0x9f, 0x7a, 0x32, 0xe6, 0x20, 0xcc, 0x65, 0x45, 0xca, 0x21,
	0xbb, 0xdf, 0x23, 0x74, 0x3d, 0x6c, 0xf1, 0x13, 0xb4, 0xee, 0x9c, 0xee, 0x9f, 0x9e, 0x39, 0xee,
	0x69, 0xeb, 0xdb, 0x53, 0xf7, 0xac, 0xe3, 0x9c, 0xb4, 0x9a, 0xed, 0xa3, 0x76, 0xeb, 0xb0, 0x3a,
	0x87, 0xd7, 0xd1, 0x6a, 0xde, 0x78, 0xd2, 0xea, 0x1c, 0xb6, 0x3b, 0xc7, 0x55, 0xe3, 0xb6, 0xc1,
	0x39, 0x6b, 0x36, 0x5b, 0x8e, 0x53, 0x2d, 0x1c, 0x1c, 0xbe, 0xb9, 0xac, 0x19, 0x6f, 0x2f, 0x6b,
	0xc6, 0xdf, 0x97, 0x35, 0xe3, 0x97, 0xab, 0xda, 0xdc, 0xdb, 0xab, 0xda, 0xdc, 0x1f, 0x57, 0xb5,
	0xb9, 0xef, 0x76, 0x73, 0x19, 0x71, 0x48, 0x4f, 0xdd, 0xac, 0x91, 0x7d, 0x03, 0xbc, 0xce, 0xbe,
	0x02, 0x54, 0x66, 0xba, 0x8b, 0xea, 0x6f, 0xff, 0xb3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75,
	0x75, 0x0b, 0xf4, 0x6c, 0x08, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prophecies) > 0 {
		for iNdEx := len(m.Prophecies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prophecies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressWhitelist) > 0 {
		for k := range m.AddressWhitelist {
			v := m.AddressWhitelist[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTypes(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Prophecy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prophecy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Prophecy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimValidators) > 0 {
		for iNdEx := len(m.ClaimValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimValidators[iNdEx])
			copy(dAtA[i:], m.ClaimValidators[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ClaimValidators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorWhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorWhiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorWhiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhiteList) > 0 {
		for k := range m.WhiteList {
			v := m.WhiteList[k]
			baseI := i
			i = encodeVarintTypes(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainFeeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainFeeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainFeeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinimumBurnCost.Size()
		i -= size
		if _, err := m.MinimumBurnCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MinimumLockCost.Size()
		i -= size
		if _, err := m.MinimumLockCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.FeeCurrencyGas.Size()
		i -= size
		if _, err := m.FeeCurrencyGas.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FeeCurrency) > 0 {
		i -= len(m.FeeCurrency)
		copy(dAtA[i:], m.FeeCurrency)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FeeCurrency)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProphecyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProphecyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProphecyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.EthereumAddress) > 0 {
		for iNdEx := len(m.EthereumAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EthereumAddress[iNdEx])
			copy(dAtA[i:], m.EthereumAddress[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.EthereumAddress[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size := m.CrosschainFee.Size()
		i -= size
		if _, err := m.CrosschainFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.GlobalNonce != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GlobalNonce))
		i--
		dAtA[i] = 0x50
	}
	if m.DoublePeg {
		i--
		if m.DoublePeg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.TokenDenomHash) > 0 {
		i -= len(m.TokenDenomHash)
		copy(dAtA[i:], m.TokenDenomHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenDenomHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if m.CosmosSenderSequence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CosmosSenderSequence))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProphecyId) > 0 {
		i -= len(m.ProphecyId)
		copy(dAtA[i:], m.ProphecyId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProphecyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressWhitelist) > 0 {
		for k, v := range m.AddressWhitelist {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Prophecies) > 0 {
		for _, e := range m.Prophecies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Prophecy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if len(m.ClaimValidators) > 0 {
		for _, s := range m.ClaimValidators {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ValidatorWhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhiteList) > 0 {
		for k, v := range m.WhiteList {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + sovTypes(uint64(v))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CrossChainFeeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeCurrency)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.FeeCurrencyGas.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MinimumLockCost.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MinimumBurnCost.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ProphecyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTypes(uint64(m.NetworkDescriptor))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTypes(uint64(m.BlockNumber))
	}
	l = len(m.ProphecyId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CosmosSenderSequence != 0 {
		n += 1 + sovTypes(uint64(m.CosmosSenderSequence))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenDenomHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.DoublePeg {
		n += 2
	}
	if m.GlobalNonce != 0 {
		n += 1 + sovTypes(uint64(m.GlobalNonce))
	}
	l = m.CrosschainFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.EthereumAddress) > 0 {
		for _, s := range m.EthereumAddress {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressWhitelist == nil {
				m.AddressWhitelist = make(map[uint32]*ValidatorWhiteList)
			}
			var mapkey uint32
			var mapvalue *ValidatorWhiteList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValidatorWhiteList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AddressWhitelist[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prophecies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prophecies = append(m.Prophecies, &Prophecy{})
			if err := m.Prophecies[len(m.Prophecies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prophecy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prophecy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prophecy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StatusText(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimValidators = append(m.ClaimValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorWhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorWhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorWhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WhiteList == nil {
				m.WhiteList = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WhiteList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainFeeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainFeeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainFeeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrencyGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCurrencyGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLockCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumLockCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBurnCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumBurnCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProphecyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProphecyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProphecyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProphecyId = append(m.ProphecyId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProphecyId == nil {
				m.ProphecyId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSenderSequence", wireType)
			}
			m.CosmosSenderSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosSenderSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenomHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenomHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoublePeg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoublePeg = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNonce", wireType)
			}
			m.GlobalNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumAddress = append(m.EthereumAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

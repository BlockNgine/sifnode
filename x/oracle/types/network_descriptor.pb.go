// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/oracle/v1/network_descriptor.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NetworkDescriptor is a unique identifier for all chains that Sifchain
// enables. Numbers MUST BE BETWEEN 0-9999, Sifnode WILL PANIC if a number
// is below 0 or larger then 9999 as we use human readable denoms.
type NetworkDescriptor int32

const (
	// Not currently in use
	NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED NetworkDescriptor = 0
	// https://ethereum.org
	NetworkDescriptor_NETWORK_DESCRIPTOR_ETHEREUM NetworkDescriptor = 1
	// Bitcoin mainnet
	NetworkDescriptor_NETWORK_DESCRIPTOR_BITCOIN NetworkDescriptor = 2
	// https://github.com/ethereum/ropsten
	NetworkDescriptor_NETWORK_DESCRIPTOR_ETHEREUM_TESTNET_ROPSTEN NetworkDescriptor = 3
	// https://www.binance.org
	NetworkDescriptor_NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN NetworkDescriptor = 56
	// https://testnet.binance.org/
	NetworkDescriptor_NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN_TESTNET NetworkDescriptor = 97
	// Ganache local testnet
	NetworkDescriptor_NETWORK_DESCRIPTOR_GANACHE NetworkDescriptor = 5777
	// Hardhat local testnet
	NetworkDescriptor_NETWORK_DESCRIPTOR_HARDHAT NetworkDescriptor = 9999
)

var NetworkDescriptor_name = map[int32]string{
	0:    "NETWORK_DESCRIPTOR_UNSPECIFIED",
	1:    "NETWORK_DESCRIPTOR_ETHEREUM",
	2:    "NETWORK_DESCRIPTOR_BITCOIN",
	3:    "NETWORK_DESCRIPTOR_ETHEREUM_TESTNET_ROPSTEN",
	56:   "NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN",
	97:   "NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN_TESTNET",
	5777: "NETWORK_DESCRIPTOR_GANACHE",
	9999: "NETWORK_DESCRIPTOR_HARDHAT",
}

var NetworkDescriptor_value = map[string]int32{
	"NETWORK_DESCRIPTOR_UNSPECIFIED":                 0,
	"NETWORK_DESCRIPTOR_ETHEREUM":                    1,
	"NETWORK_DESCRIPTOR_BITCOIN":                     2,
	"NETWORK_DESCRIPTOR_ETHEREUM_TESTNET_ROPSTEN":    3,
	"NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN":         56,
	"NETWORK_DESCRIPTOR_BINANCE_SMART_CHAIN_TESTNET": 97,
	"NETWORK_DESCRIPTOR_GANACHE":                     5777,
	"NETWORK_DESCRIPTOR_HARDHAT":                     9999,
}

func (x NetworkDescriptor) String() string {
	return proto.EnumName(NetworkDescriptor_name, int32(x))
}

func (NetworkDescriptor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_721e8ae3af4d5f0a, []int{0}
}

func init() {
	proto.RegisterEnum("sifnode.oracle.v1.NetworkDescriptor", NetworkDescriptor_name, NetworkDescriptor_value)
}

func init() {
	proto.RegisterFile("sifnode/oracle/v1/network_descriptor.proto", fileDescriptor_721e8ae3af4d5f0a)
}

var fileDescriptor_721e8ae3af4d5f0a = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd1, 0x41, 0x4b, 0xf3, 0x30,
	0x1c, 0xc7, 0xf1, 0x76, 0x0f, 0x3c, 0x87, 0x9c, 0xb2, 0xe0, 0x69, 0x42, 0x06, 0x1e, 0x3c, 0x54,
	0x6c, 0x98, 0x5e, 0xbc, 0x66, 0xed, 0x5f, 0x5b, 0x64, 0xe9, 0x48, 0x33, 0x04, 0x2f, 0x61, 0xeb,
	0xba, 0xad, 0xa8, 0xcb, 0xe8, 0xea, 0xd4, 0x57, 0xa1, 0xbe, 0x2b, 0xc1, 0xcb, 0x8e, 0x1e, 0x65,
	0x7b, 0x23, 0xe2, 0x66, 0x3d, 0x55, 0xf1, 0x16, 0xc8, 0x87, 0x6f, 0x02, 0x3f, 0xe4, 0xcc, 0xb3,
	0xd1, 0xd4, 0x0c, 0x53, 0x66, 0xf2, 0x7e, 0x72, 0x9d, 0xb2, 0x45, 0x8b, 0x4d, 0xd3, 0xe2, 0xce,
	0xe4, 0x57, 0x7a, 0x98, 0xce, 0x93, 0x3c, 0x9b, 0x15, 0x26, 0x77, 0x67, 0xb9, 0x29, 0x0c, 0xa9,
	0x7f, 0x59, 0x77, 0x6b, 0xdd, 0x45, 0xab, 0xb1, 0x33, 0x36, 0x63, 0xb3, 0xb9, 0x65, 0x9f, 0xa7,
	0x2d, 0x74, 0x5e, 0x6b, 0xa8, 0x2e, 0xb6, 0x15, 0xff, 0x3b, 0x42, 0xf6, 0x10, 0x15, 0xa0, 0x2e,
	0x22, 0x79, 0xae, 0x7d, 0x88, 0x3d, 0x19, 0x76, 0x55, 0x24, 0x75, 0x4f, 0xc4, 0x5d, 0xf0, 0xc2,
	0xd3, 0x10, 0x7c, 0x6c, 0x91, 0x26, 0xda, 0xad, 0x30, 0xa0, 0x02, 0x90, 0xd0, 0xeb, 0x60, 0x9b,
	0x50, 0xd4, 0xa8, 0x00, 0xed, 0x50, 0x79, 0x51, 0x28, 0x70, 0x8d, 0x30, 0x74, 0xf0, 0x4b, 0x40,
	0x2b, 0x88, 0x95, 0x00, 0xa5, 0x65, 0xd4, 0x8d, 0x15, 0x08, 0xfc, 0x8f, 0x38, 0x68, 0xbf, 0x32,
	0x28, 0xb8, 0xf0, 0x40, 0xc7, 0x1d, 0x2e, 0x95, 0xf6, 0x02, 0x1e, 0x0a, 0x7c, 0x42, 0x8e, 0x90,
	0xfb, 0x37, 0x5b, 0xbe, 0x83, 0xfb, 0xa4, 0x59, 0xf9, 0xe1, 0x33, 0x2e, 0xb8, 0x17, 0x00, 0x7e,
	0x3e, 0xfc, 0x01, 0x04, 0x5c, 0xfa, 0x01, 0x57, 0xf8, 0x51, 0xb4, 0xfd, 0x97, 0x15, 0xb5, 0x97,
	0x2b, 0x6a, 0xbf, 0xaf, 0xa8, 0xfd, 0xb4, 0xa6, 0xd6, 0x72, 0x4d, 0xad, 0xb7, 0x35, 0xb5, 0x2e,
	0x9d, 0x71, 0x56, 0x4c, 0x6e, 0x07, 0x6e, 0x62, 0x6e, 0x58, 0x9c, 0x8d, 0x92, 0x49, 0x3f, 0x9b,
	0xb2, 0x72, 0xd0, 0xfb, 0x72, 0xd2, 0xe2, 0x61, 0x96, 0xce, 0x07, 0xff, 0x37, 0xd3, 0x1c, 0x7f,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x48, 0x74, 0xd8, 0xf1, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/ethbridge/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/Sifchain/sifnode/x/oracle/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryEthProphecyRequest payload for EthProphecy rpc query
type QueryEthProphecyRequest struct {
	ProphecyId []byte `protobuf:"bytes,1,opt,name=prophecy_id,json=prophecyId,proto3" json:"prophecy_id,omitempty"`
}

func (m *QueryEthProphecyRequest) Reset()         { *m = QueryEthProphecyRequest{} }
func (m *QueryEthProphecyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEthProphecyRequest) ProtoMessage()    {}
func (*QueryEthProphecyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{0}
}
func (m *QueryEthProphecyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEthProphecyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEthProphecyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEthProphecyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEthProphecyRequest.Merge(m, src)
}
func (m *QueryEthProphecyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEthProphecyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEthProphecyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEthProphecyRequest proto.InternalMessageInfo

func (m *QueryEthProphecyRequest) GetProphecyId() []byte {
	if m != nil {
		return m.ProphecyId
	}
	return nil
}

// QueryEthProphecyResponse payload for EthProphecy rpc query
type QueryEthProphecyResponse struct {
	ProphecyId      []byte           `protobuf:"bytes,1,opt,name=prophecy_id,json=prophecyId,proto3" json:"prophecy_id,omitempty"`
	Status          types.StatusText `protobuf:"varint,2,opt,name=status,proto3,enum=sifnode.oracle.v1.StatusText" json:"status,omitempty"`
	ClaimValidators []string         `protobuf:"bytes,3,rep,name=claim_validators,json=claimValidators,proto3" json:"claim_validators,omitempty"`
}

func (m *QueryEthProphecyResponse) Reset()         { *m = QueryEthProphecyResponse{} }
func (m *QueryEthProphecyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEthProphecyResponse) ProtoMessage()    {}
func (*QueryEthProphecyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{1}
}
func (m *QueryEthProphecyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEthProphecyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEthProphecyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEthProphecyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEthProphecyResponse.Merge(m, src)
}
func (m *QueryEthProphecyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEthProphecyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEthProphecyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEthProphecyResponse proto.InternalMessageInfo

func (m *QueryEthProphecyResponse) GetProphecyId() []byte {
	if m != nil {
		return m.ProphecyId
	}
	return nil
}

func (m *QueryEthProphecyResponse) GetStatus() types.StatusText {
	if m != nil {
		return m.Status
	}
	return types.StatusText_STATUS_TEXT_UNSPECIFIED
}

func (m *QueryEthProphecyResponse) GetClaimValidators() []string {
	if m != nil {
		return m.ClaimValidators
	}
	return nil
}

// QueryCrosschainFeeConfigRequest payload for EthProphecy rpc query
type QueryCrosschainFeeConfigRequest struct {
	NetworkDescriptor types.NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
}

func (m *QueryCrosschainFeeConfigRequest) Reset()         { *m = QueryCrosschainFeeConfigRequest{} }
func (m *QueryCrosschainFeeConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFeeConfigRequest) ProtoMessage()    {}
func (*QueryCrosschainFeeConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{2}
}
func (m *QueryCrosschainFeeConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFeeConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFeeConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFeeConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFeeConfigRequest.Merge(m, src)
}
func (m *QueryCrosschainFeeConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFeeConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFeeConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFeeConfigRequest proto.InternalMessageInfo

func (m *QueryCrosschainFeeConfigRequest) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

// QueryCrosschainFeeConfigResponse payload for EthProphecy rpc query
type QueryCrosschainFeeConfigResponse struct {
	CrosschainFeeConfig *types.CrossChainFeeConfig `protobuf:"bytes,1,opt,name=crosschain_fee_config,json=crosschainFeeConfig,proto3" json:"crosschain_fee_config,omitempty"`
}

func (m *QueryCrosschainFeeConfigResponse) Reset()         { *m = QueryCrosschainFeeConfigResponse{} }
func (m *QueryCrosschainFeeConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrosschainFeeConfigResponse) ProtoMessage()    {}
func (*QueryCrosschainFeeConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{3}
}
func (m *QueryCrosschainFeeConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrosschainFeeConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrosschainFeeConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrosschainFeeConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrosschainFeeConfigResponse.Merge(m, src)
}
func (m *QueryCrosschainFeeConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrosschainFeeConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrosschainFeeConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrosschainFeeConfigResponse proto.InternalMessageInfo

func (m *QueryCrosschainFeeConfigResponse) GetCrosschainFeeConfig() *types.CrossChainFeeConfig {
	if m != nil {
		return m.CrosschainFeeConfig
	}
	return nil
}

// ProphciesCompletedQueryRequest payload for ProphciesCompletedQueryRequest rpc
// query
type ProphciesCompletedQueryRequest struct {
	NetworkDescriptor types.NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
	GlobalNonce       uint64                  `protobuf:"varint,2,opt,name=global_nonce,json=globalNonce,proto3" json:"global_nonce,omitempty"`
}

func (m *ProphciesCompletedQueryRequest) Reset()         { *m = ProphciesCompletedQueryRequest{} }
func (m *ProphciesCompletedQueryRequest) String() string { return proto.CompactTextString(m) }
func (*ProphciesCompletedQueryRequest) ProtoMessage()    {}
func (*ProphciesCompletedQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{4}
}
func (m *ProphciesCompletedQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProphciesCompletedQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProphciesCompletedQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProphciesCompletedQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProphciesCompletedQueryRequest.Merge(m, src)
}
func (m *ProphciesCompletedQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProphciesCompletedQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProphciesCompletedQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProphciesCompletedQueryRequest proto.InternalMessageInfo

func (m *ProphciesCompletedQueryRequest) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *ProphciesCompletedQueryRequest) GetGlobalNonce() uint64 {
	if m != nil {
		return m.GlobalNonce
	}
	return 0
}

// QueryCrosschainFeeConfigResponse payload for ProphciesCompletedQueryResponse
// rpc query response
type ProphciesCompletedQueryResponse struct {
	ProphecyInfo []*types.ProphecyInfo `protobuf:"bytes,1,rep,name=prophecy_info,json=prophecyInfo,proto3" json:"prophecy_info,omitempty"`
}

func (m *ProphciesCompletedQueryResponse) Reset()         { *m = ProphciesCompletedQueryResponse{} }
func (m *ProphciesCompletedQueryResponse) String() string { return proto.CompactTextString(m) }
func (*ProphciesCompletedQueryResponse) ProtoMessage()    {}
func (*ProphciesCompletedQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{5}
}
func (m *ProphciesCompletedQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProphciesCompletedQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProphciesCompletedQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProphciesCompletedQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProphciesCompletedQueryResponse.Merge(m, src)
}
func (m *ProphciesCompletedQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProphciesCompletedQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProphciesCompletedQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProphciesCompletedQueryResponse proto.InternalMessageInfo

func (m *ProphciesCompletedQueryResponse) GetProphecyInfo() []*types.ProphecyInfo {
	if m != nil {
		return m.ProphecyInfo
	}
	return nil
}

// QueryEthereumLockBurnNonceRequest payload for EthereumLockBurnNonce rpc query
type QueryEthereumLockBurnNonceRequest struct {
	NetworkDescriptor types.NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
	RelayerValAddress string                  `protobuf:"bytes,2,opt,name=relayer_val_address,json=relayerValAddress,proto3" json:"relayer_val_address,omitempty"`
}

func (m *QueryEthereumLockBurnNonceRequest) Reset()         { *m = QueryEthereumLockBurnNonceRequest{} }
func (m *QueryEthereumLockBurnNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEthereumLockBurnNonceRequest) ProtoMessage()    {}
func (*QueryEthereumLockBurnNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{6}
}
func (m *QueryEthereumLockBurnNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEthereumLockBurnNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEthereumLockBurnNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEthereumLockBurnNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEthereumLockBurnNonceRequest.Merge(m, src)
}
func (m *QueryEthereumLockBurnNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEthereumLockBurnNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEthereumLockBurnNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEthereumLockBurnNonceRequest proto.InternalMessageInfo

func (m *QueryEthereumLockBurnNonceRequest) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *QueryEthereumLockBurnNonceRequest) GetRelayerValAddress() string {
	if m != nil {
		return m.RelayerValAddress
	}
	return ""
}

// QueryEthereumLockBurnNonceResponse return EthereumLockBurnNonce
type QueryEthereumLockBurnNonceResponse struct {
	EthereumLockBurnNonce uint64 `protobuf:"varint,1,opt,name=ethereum_lock_burn_nonce,json=ethereumLockBurnNonce,proto3" json:"ethereum_lock_burn_nonce,omitempty"`
}

func (m *QueryEthereumLockBurnNonceResponse) Reset()         { *m = QueryEthereumLockBurnNonceResponse{} }
func (m *QueryEthereumLockBurnNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEthereumLockBurnNonceResponse) ProtoMessage()    {}
func (*QueryEthereumLockBurnNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{7}
}
func (m *QueryEthereumLockBurnNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEthereumLockBurnNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEthereumLockBurnNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEthereumLockBurnNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEthereumLockBurnNonceResponse.Merge(m, src)
}
func (m *QueryEthereumLockBurnNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEthereumLockBurnNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEthereumLockBurnNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEthereumLockBurnNonceResponse proto.InternalMessageInfo

func (m *QueryEthereumLockBurnNonceResponse) GetEthereumLockBurnNonce() uint64 {
	if m != nil {
		return m.EthereumLockBurnNonce
	}
	return 0
}

// QueryWitnessLockBurnNonceRequest payload for WitnessLockBurnNonce rpc query
type QueryWitnessLockBurnNonceRequest struct {
	NetworkDescriptor types.NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty"`
	RelayerValAddress string                  `protobuf:"bytes,2,opt,name=relayer_val_address,json=relayerValAddress,proto3" json:"relayer_val_address,omitempty"`
}

func (m *QueryWitnessLockBurnNonceRequest) Reset()         { *m = QueryWitnessLockBurnNonceRequest{} }
func (m *QueryWitnessLockBurnNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWitnessLockBurnNonceRequest) ProtoMessage()    {}
func (*QueryWitnessLockBurnNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{8}
}
func (m *QueryWitnessLockBurnNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWitnessLockBurnNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWitnessLockBurnNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWitnessLockBurnNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWitnessLockBurnNonceRequest.Merge(m, src)
}
func (m *QueryWitnessLockBurnNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWitnessLockBurnNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWitnessLockBurnNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWitnessLockBurnNonceRequest proto.InternalMessageInfo

func (m *QueryWitnessLockBurnNonceRequest) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *QueryWitnessLockBurnNonceRequest) GetRelayerValAddress() string {
	if m != nil {
		return m.RelayerValAddress
	}
	return ""
}

// QueryWitnessLockBurnNonceResponse return WitnessLockBurnNonce
type QueryWitnessLockBurnNonceResponse struct {
	WitnessLockBurnNonce uint64 `protobuf:"varint,1,opt,name=witness_lock_burn_nonce,json=witnessLockBurnNonce,proto3" json:"witness_lock_burn_nonce,omitempty"`
}

func (m *QueryWitnessLockBurnNonceResponse) Reset()         { *m = QueryWitnessLockBurnNonceResponse{} }
func (m *QueryWitnessLockBurnNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWitnessLockBurnNonceResponse) ProtoMessage()    {}
func (*QueryWitnessLockBurnNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7077edcf9f792b78, []int{9}
}
func (m *QueryWitnessLockBurnNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWitnessLockBurnNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWitnessLockBurnNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWitnessLockBurnNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWitnessLockBurnNonceResponse.Merge(m, src)
}
func (m *QueryWitnessLockBurnNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWitnessLockBurnNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWitnessLockBurnNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWitnessLockBurnNonceResponse proto.InternalMessageInfo

func (m *QueryWitnessLockBurnNonceResponse) GetWitnessLockBurnNonce() uint64 {
	if m != nil {
		return m.WitnessLockBurnNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryEthProphecyRequest)(nil), "sifnode.ethbridge.v1.QueryEthProphecyRequest")
	proto.RegisterType((*QueryEthProphecyResponse)(nil), "sifnode.ethbridge.v1.QueryEthProphecyResponse")
	proto.RegisterType((*QueryCrosschainFeeConfigRequest)(nil), "sifnode.ethbridge.v1.QueryCrosschainFeeConfigRequest")
	proto.RegisterType((*QueryCrosschainFeeConfigResponse)(nil), "sifnode.ethbridge.v1.QueryCrosschainFeeConfigResponse")
	proto.RegisterType((*ProphciesCompletedQueryRequest)(nil), "sifnode.ethbridge.v1.ProphciesCompletedQueryRequest")
	proto.RegisterType((*ProphciesCompletedQueryResponse)(nil), "sifnode.ethbridge.v1.ProphciesCompletedQueryResponse")
	proto.RegisterType((*QueryEthereumLockBurnNonceRequest)(nil), "sifnode.ethbridge.v1.QueryEthereumLockBurnNonceRequest")
	proto.RegisterType((*QueryEthereumLockBurnNonceResponse)(nil), "sifnode.ethbridge.v1.QueryEthereumLockBurnNonceResponse")
	proto.RegisterType((*QueryWitnessLockBurnNonceRequest)(nil), "sifnode.ethbridge.v1.QueryWitnessLockBurnNonceRequest")
	proto.RegisterType((*QueryWitnessLockBurnNonceResponse)(nil), "sifnode.ethbridge.v1.QueryWitnessLockBurnNonceResponse")
}

func init() { proto.RegisterFile("sifnode/ethbridge/v1/query.proto", fileDescriptor_7077edcf9f792b78) }

var fileDescriptor_7077edcf9f792b78 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x41, 0x6b, 0x13, 0x5b,
	0x14, 0xce, 0x7d, 0xed, 0x2b, 0xf4, 0xa6, 0xaf, 0xef, 0xf5, 0x36, 0xa5, 0x21, 0xd0, 0x24, 0x1d,
	0x1e, 0x12, 0x85, 0x4e, 0x68, 0x34, 0x56, 0xdc, 0xd9, 0x54, 0xa5, 0x20, 0x45, 0x27, 0x52, 0xa1,
	0x20, 0xc3, 0xe4, 0xce, 0x49, 0x32, 0x74, 0x72, 0xef, 0xf4, 0xde, 0x9b, 0xa4, 0xd9, 0xb8, 0x14,
	0x04, 0x17, 0x2e, 0x15, 0x71, 0xad, 0x3f, 0xc5, 0x65, 0x97, 0x2e, 0xa5, 0xfd, 0x23, 0x92, 0x3b,
	0x33, 0xb1, 0x9a, 0x49, 0x34, 0x8b, 0x82, 0xbb, 0xe4, 0x9c, 0xef, 0x9c, 0xf3, 0x9d, 0xef, 0x9c,
	0x39, 0x33, 0xb8, 0x28, 0xbd, 0x26, 0xe3, 0x2e, 0x94, 0x41, 0xb5, 0x1b, 0xc2, 0x73, 0x5b, 0x50,
	0xee, 0x6d, 0x97, 0x4f, 0xba, 0x20, 0x06, 0x66, 0x20, 0xb8, 0xe2, 0x24, 0x13, 0x21, 0xcc, 0x11,
	0xc2, 0xec, 0x6d, 0xe7, 0x32, 0x2d, 0xde, 0xe2, 0x1a, 0x50, 0x1e, 0xfe, 0x0a, 0xb1, 0xb9, 0xe4,
	0x6c, 0x6a, 0x10, 0x80, 0x8c, 0x10, 0x1b, 0x31, 0x82, 0x0b, 0x87, 0xfa, 0x63, 0xee, 0x1b, 0xe3,
	0x6e, 0x06, 0xaa, 0xcf, 0xc5, 0xb1, 0xed, 0x82, 0xa4, 0xc2, 0x0b, 0x14, 0x17, 0x21, 0xd6, 0xb8,
	0x8b, 0xd7, 0x9f, 0x0c, 0x79, 0xde, 0x57, 0xed, 0xc7, 0x82, 0x07, 0x6d, 0xa0, 0x03, 0x0b, 0x4e,
	0xba, 0x20, 0x15, 0x29, 0xe0, 0x74, 0x10, 0x99, 0x6c, 0xcf, 0xcd, 0xa2, 0x22, 0x2a, 0x2d, 0x59,
	0x38, 0x36, 0xed, 0xbb, 0xc6, 0x07, 0x84, 0xb3, 0xe3, 0xc1, 0x32, 0xe0, 0x4c, 0xc2, 0x2f, 0xa3,
	0x49, 0x15, 0x2f, 0x48, 0xe5, 0xa8, 0xae, 0xcc, 0xfe, 0x55, 0x44, 0xa5, 0xe5, 0xca, 0x86, 0x19,
	0x6b, 0x14, 0xd2, 0x36, 0x7b, 0xdb, 0x66, 0x5d, 0x03, 0x9e, 0xc2, 0xa9, 0xb2, 0x22, 0x30, 0xb9,
	0x8e, 0xff, 0xa3, 0xbe, 0xe3, 0x75, 0xec, 0x9e, 0xe3, 0x7b, 0xae, 0xa3, 0xb8, 0x90, 0xd9, 0xb9,
	0xe2, 0x5c, 0x69, 0xd1, 0xfa, 0x57, 0xdb, 0x0f, 0x47, 0x66, 0xa3, 0x87, 0x0b, 0x9a, 0x5e, 0x4d,
	0x70, 0x29, 0x69, 0xdb, 0xf1, 0xd8, 0x03, 0x80, 0x1a, 0x67, 0x4d, 0xaf, 0x15, 0xf7, 0x58, 0xc7,
	0x64, 0x5c, 0x1a, 0x4d, 0x76, 0xb9, 0xf2, 0x7f, 0x02, 0xa1, 0x83, 0x10, 0xbc, 0x37, 0xc2, 0x5a,
	0x2b, 0xec, 0x67, 0x93, 0xf1, 0x02, 0x17, 0x27, 0xd7, 0x8d, 0xe4, 0x39, 0xc2, 0x6b, 0x74, 0xe4,
	0xb6, 0x9b, 0x00, 0x36, 0xd5, 0x00, 0x5d, 0x3b, 0x5d, 0xb9, 0x96, 0x50, 0x5b, 0xa7, 0xab, 0xfd,
	0x98, 0x6e, 0x95, 0x8e, 0xd7, 0x30, 0xde, 0x22, 0x9c, 0xd7, 0xf3, 0xa0, 0x1e, 0xc8, 0x1a, 0xef,
	0x04, 0x3e, 0x28, 0x70, 0x35, 0xa5, 0xab, 0xec, 0x9b, 0x6c, 0xe2, 0xa5, 0x96, 0xcf, 0x1b, 0x8e,
	0x6f, 0x33, 0xce, 0x28, 0xe8, 0xb9, 0xce, 0x5b, 0xe9, 0xd0, 0x76, 0x30, 0x34, 0x19, 0x2d, 0x5c,
	0x98, 0xc8, 0x2c, 0x52, 0x66, 0x0f, 0xff, 0xf3, 0x7d, 0x71, 0x58, 0x93, 0x67, 0x51, 0x71, 0xae,
	0x94, 0xae, 0x14, 0x12, 0x58, 0xc5, 0x4b, 0xb7, 0xcf, 0x9a, 0xdc, 0x5a, 0x0a, 0x2e, 0xfd, 0x33,
	0x3e, 0x21, 0xbc, 0x19, 0xef, 0x26, 0x08, 0xe8, 0x76, 0x1e, 0x71, 0x7a, 0xbc, 0xdb, 0x15, 0x4c,
	0xf3, 0xb8, 0x52, 0x19, 0x4c, 0xbc, 0x2a, 0xc0, 0x77, 0x06, 0x20, 0x86, 0x3b, 0x6a, 0x3b, 0xae,
	0x2b, 0x40, 0x86, 0x5b, 0xbe, 0x68, 0xad, 0x44, 0xae, 0x43, 0xc7, 0xbf, 0x17, 0x3a, 0x8c, 0xe7,
	0xd8, 0x98, 0xc6, 0x34, 0x92, 0x65, 0x07, 0x67, 0x21, 0x02, 0xd8, 0x3e, 0xa7, 0xc7, 0x76, 0xa3,
	0x2b, 0x58, 0x24, 0x34, 0xd2, 0x42, 0xaf, 0x41, 0x52, 0x02, 0xe3, 0x23, 0x8a, 0xd6, 0xf1, 0x99,
	0xa7, 0x18, 0x48, 0xf9, 0xe7, 0x0a, 0x71, 0x14, 0x8d, 0x2c, 0x99, 0x68, 0xa4, 0x43, 0x15, 0xaf,
	0xf7, 0x43, 0xff, 0x04, 0x19, 0x32, 0xfd, 0x84, 0xf0, 0xca, 0xfb, 0x79, 0xfc, 0xb7, 0x4e, 0x4e,
	0x18, 0x4e, 0x5f, 0xba, 0x57, 0x64, 0xcb, 0x4c, 0x3a, 0xcd, 0xe6, 0x84, 0xa3, 0x98, 0x33, 0x7f,
	0x17, 0x1e, 0xd2, 0x35, 0x52, 0xe4, 0x25, 0xc2, 0xab, 0x09, 0x97, 0x80, 0x54, 0xa7, 0x64, 0x9a,
	0x7c, 0xb1, 0x72, 0xb7, 0x67, 0x0d, 0x1b, 0x11, 0x79, 0x8d, 0xf0, 0x5a, 0xe2, 0x8e, 0x91, 0x9d,
	0xe9, 0x4d, 0x4d, 0x7c, 0x7e, 0x72, 0x77, 0x66, 0x0f, 0x1c, 0xd1, 0x79, 0x85, 0x70, 0x26, 0x69,
	0xd2, 0x64, 0x5a, 0x87, 0x53, 0x76, 0x38, 0xb7, 0x33, 0x73, 0x5c, 0xcc, 0xa5, 0xf2, 0x6e, 0xf2,
	0xc5, 0xac, 0x83, 0xe8, 0x79, 0x14, 0x48, 0x1f, 0x2f, 0xd4, 0xc1, 0x11, 0xb4, 0x4d, 0x6e, 0x25,
	0xd7, 0x99, 0x7e, 0x71, 0x73, 0xd5, 0x19, 0xa3, 0x62, 0x6e, 0xbb, 0x0f, 0x3f, 0x9f, 0xe7, 0xd1,
	0xd9, 0x79, 0x1e, 0x7d, 0x3d, 0xcf, 0xa3, 0x37, 0x17, 0xf9, 0xd4, 0xd9, 0x45, 0x3e, 0xf5, 0xe5,
	0x22, 0x9f, 0x3a, 0xda, 0x6a, 0x79, 0xaa, 0xdd, 0x6d, 0x98, 0x94, 0x77, 0xca, 0x75, 0xaf, 0xa9,
	0x07, 0x5f, 0x8e, 0xdf, 0xfd, 0xa7, 0x97, 0x3e, 0x1f, 0xf4, 0xc7, 0x41, 0x63, 0x41, 0xbf, 0xf1,
	0x6f, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x20, 0xe6, 0x2d, 0xae, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// EthProphecy queries an EthProphecy
	EthProphecy(ctx context.Context, in *QueryEthProphecyRequest, opts ...grpc.CallOption) (*QueryEthProphecyResponse, error)
	// CrosschainFeeConfig queries crosschain fee config for a network
	CrosschainFeeConfig(ctx context.Context, in *QueryCrosschainFeeConfigRequest, opts ...grpc.CallOption) (*QueryCrosschainFeeConfigResponse, error)
	// EthereumLockBurnNonce query ethereum lock burn nonce for a relayer in a
	// network
	EthereumLockBurnNonce(ctx context.Context, in *QueryEthereumLockBurnNonceRequest, opts ...grpc.CallOption) (*QueryEthereumLockBurnNonceResponse, error)
	// WitnessLockBurnNonce query witness lock burn nonce for a relayer in a
	// network
	WitnessLockBurnNonce(ctx context.Context, in *QueryWitnessLockBurnNonceRequest, opts ...grpc.CallOption) (*QueryWitnessLockBurnNonceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) EthProphecy(ctx context.Context, in *QueryEthProphecyRequest, opts ...grpc.CallOption) (*QueryEthProphecyResponse, error) {
	out := new(QueryEthProphecyResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Query/EthProphecy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainFeeConfig(ctx context.Context, in *QueryCrosschainFeeConfigRequest, opts ...grpc.CallOption) (*QueryCrosschainFeeConfigResponse, error) {
	out := new(QueryCrosschainFeeConfigResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Query/CrosschainFeeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EthereumLockBurnNonce(ctx context.Context, in *QueryEthereumLockBurnNonceRequest, opts ...grpc.CallOption) (*QueryEthereumLockBurnNonceResponse, error) {
	out := new(QueryEthereumLockBurnNonceResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Query/EthereumLockBurnNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WitnessLockBurnNonce(ctx context.Context, in *QueryWitnessLockBurnNonceRequest, opts ...grpc.CallOption) (*QueryWitnessLockBurnNonceResponse, error) {
	out := new(QueryWitnessLockBurnNonceResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Query/WitnessLockBurnNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// EthProphecy queries an EthProphecy
	EthProphecy(context.Context, *QueryEthProphecyRequest) (*QueryEthProphecyResponse, error)
	// CrosschainFeeConfig queries crosschain fee config for a network
	CrosschainFeeConfig(context.Context, *QueryCrosschainFeeConfigRequest) (*QueryCrosschainFeeConfigResponse, error)
	// EthereumLockBurnNonce query ethereum lock burn nonce for a relayer in a
	// network
	EthereumLockBurnNonce(context.Context, *QueryEthereumLockBurnNonceRequest) (*QueryEthereumLockBurnNonceResponse, error)
	// WitnessLockBurnNonce query witness lock burn nonce for a relayer in a
	// network
	WitnessLockBurnNonce(context.Context, *QueryWitnessLockBurnNonceRequest) (*QueryWitnessLockBurnNonceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) EthProphecy(ctx context.Context, req *QueryEthProphecyRequest) (*QueryEthProphecyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthProphecy not implemented")
}
func (*UnimplementedQueryServer) CrosschainFeeConfig(ctx context.Context, req *QueryCrosschainFeeConfigRequest) (*QueryCrosschainFeeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainFeeConfig not implemented")
}
func (*UnimplementedQueryServer) EthereumLockBurnNonce(ctx context.Context, req *QueryEthereumLockBurnNonceRequest) (*QueryEthereumLockBurnNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthereumLockBurnNonce not implemented")
}
func (*UnimplementedQueryServer) WitnessLockBurnNonce(ctx context.Context, req *QueryWitnessLockBurnNonceRequest) (*QueryWitnessLockBurnNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WitnessLockBurnNonce not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_EthProphecy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEthProphecyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EthProphecy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Query/EthProphecy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EthProphecy(ctx, req.(*QueryEthProphecyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainFeeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrosschainFeeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainFeeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Query/CrosschainFeeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainFeeConfig(ctx, req.(*QueryCrosschainFeeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EthereumLockBurnNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEthereumLockBurnNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EthereumLockBurnNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Query/EthereumLockBurnNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EthereumLockBurnNonce(ctx, req.(*QueryEthereumLockBurnNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WitnessLockBurnNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWitnessLockBurnNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WitnessLockBurnNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Query/WitnessLockBurnNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WitnessLockBurnNonce(ctx, req.(*QueryWitnessLockBurnNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.ethbridge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EthProphecy",
			Handler:    _Query_EthProphecy_Handler,
		},
		{
			MethodName: "CrosschainFeeConfig",
			Handler:    _Query_CrosschainFeeConfig_Handler,
		},
		{
			MethodName: "EthereumLockBurnNonce",
			Handler:    _Query_EthereumLockBurnNonce_Handler,
		},
		{
			MethodName: "WitnessLockBurnNonce",
			Handler:    _Query_WitnessLockBurnNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/ethbridge/v1/query.proto",
}

// ProphciesCompletedQueryServiceClient is the client API for ProphciesCompletedQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProphciesCompletedQueryServiceClient interface {
	// Prophecies Completed Query Service to fetch prophecy info from global nonce
	Search(ctx context.Context, in *ProphciesCompletedQueryRequest, opts ...grpc.CallOption) (*ProphciesCompletedQueryResponse, error)
}

type prophciesCompletedQueryServiceClient struct {
	cc grpc1.ClientConn
}

func NewProphciesCompletedQueryServiceClient(cc grpc1.ClientConn) ProphciesCompletedQueryServiceClient {
	return &prophciesCompletedQueryServiceClient{cc}
}

func (c *prophciesCompletedQueryServiceClient) Search(ctx context.Context, in *ProphciesCompletedQueryRequest, opts ...grpc.CallOption) (*ProphciesCompletedQueryResponse, error) {
	out := new(ProphciesCompletedQueryResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.ProphciesCompletedQueryService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProphciesCompletedQueryServiceServer is the server API for ProphciesCompletedQueryService service.
type ProphciesCompletedQueryServiceServer interface {
	// Prophecies Completed Query Service to fetch prophecy info from global nonce
	Search(context.Context, *ProphciesCompletedQueryRequest) (*ProphciesCompletedQueryResponse, error)
}

// UnimplementedProphciesCompletedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProphciesCompletedQueryServiceServer struct {
}

func (*UnimplementedProphciesCompletedQueryServiceServer) Search(ctx context.Context, req *ProphciesCompletedQueryRequest) (*ProphciesCompletedQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterProphciesCompletedQueryServiceServer(s grpc1.Server, srv ProphciesCompletedQueryServiceServer) {
	s.RegisterService(&_ProphciesCompletedQueryService_serviceDesc, srv)
}

func _ProphciesCompletedQueryService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProphciesCompletedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProphciesCompletedQueryServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.ProphciesCompletedQueryService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProphciesCompletedQueryServiceServer).Search(ctx, req.(*ProphciesCompletedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProphciesCompletedQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.ethbridge.v1.ProphciesCompletedQueryService",
	HandlerType: (*ProphciesCompletedQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ProphciesCompletedQueryService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/ethbridge/v1/query.proto",
}

func (m *QueryEthProphecyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEthProphecyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEthProphecyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProphecyId) > 0 {
		i -= len(m.ProphecyId)
		copy(dAtA[i:], m.ProphecyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProphecyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEthProphecyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEthProphecyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEthProphecyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimValidators) > 0 {
		for iNdEx := len(m.ClaimValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimValidators[iNdEx])
			copy(dAtA[i:], m.ClaimValidators[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimValidators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProphecyId) > 0 {
		i -= len(m.ProphecyId)
		copy(dAtA[i:], m.ProphecyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProphecyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrosschainFeeConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFeeConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFeeConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrosschainFeeConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrosschainFeeConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrosschainFeeConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrosschainFeeConfig != nil {
		{
			size, err := m.CrosschainFeeConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProphciesCompletedQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProphciesCompletedQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProphciesCompletedQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GlobalNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProphciesCompletedQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProphciesCompletedQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProphciesCompletedQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProphecyInfo) > 0 {
		for iNdEx := len(m.ProphecyInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProphecyInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEthereumLockBurnNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEthereumLockBurnNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEthereumLockBurnNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayerValAddress) > 0 {
		i -= len(m.RelayerValAddress)
		copy(dAtA[i:], m.RelayerValAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RelayerValAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEthereumLockBurnNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEthereumLockBurnNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEthereumLockBurnNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthereumLockBurnNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EthereumLockBurnNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWitnessLockBurnNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWitnessLockBurnNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWitnessLockBurnNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelayerValAddress) > 0 {
		i -= len(m.RelayerValAddress)
		copy(dAtA[i:], m.RelayerValAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RelayerValAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWitnessLockBurnNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWitnessLockBurnNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWitnessLockBurnNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WitnessLockBurnNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WitnessLockBurnNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEthProphecyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProphecyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEthProphecyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProphecyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if len(m.ClaimValidators) > 0 {
		for _, s := range m.ClaimValidators {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCrosschainFeeConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovQuery(uint64(m.NetworkDescriptor))
	}
	return n
}

func (m *QueryCrosschainFeeConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrosschainFeeConfig != nil {
		l = m.CrosschainFeeConfig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ProphciesCompletedQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovQuery(uint64(m.NetworkDescriptor))
	}
	if m.GlobalNonce != 0 {
		n += 1 + sovQuery(uint64(m.GlobalNonce))
	}
	return n
}

func (m *ProphciesCompletedQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProphecyInfo) > 0 {
		for _, e := range m.ProphecyInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryEthereumLockBurnNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovQuery(uint64(m.NetworkDescriptor))
	}
	l = len(m.RelayerValAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEthereumLockBurnNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthereumLockBurnNonce != 0 {
		n += 1 + sovQuery(uint64(m.EthereumLockBurnNonce))
	}
	return n
}

func (m *QueryWitnessLockBurnNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovQuery(uint64(m.NetworkDescriptor))
	}
	l = len(m.RelayerValAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWitnessLockBurnNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WitnessLockBurnNonce != 0 {
		n += 1 + sovQuery(uint64(m.WitnessLockBurnNonce))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEthProphecyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEthProphecyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEthProphecyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProphecyId = append(m.ProphecyId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProphecyId == nil {
				m.ProphecyId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEthProphecyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEthProphecyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEthProphecyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProphecyId = append(m.ProphecyId[:0], dAtA[iNdEx:postIndex]...)
			if m.ProphecyId == nil {
				m.ProphecyId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.StatusText(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimValidators = append(m.ClaimValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrosschainFeeConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFeeConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFeeConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrosschainFeeConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrosschainFeeConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrosschainFeeConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFeeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrosschainFeeConfig == nil {
				m.CrosschainFeeConfig = &types.CrossChainFeeConfig{}
			}
			if err := m.CrosschainFeeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProphciesCompletedQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProphciesCompletedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProphciesCompletedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNonce", wireType)
			}
			m.GlobalNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProphciesCompletedQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProphciesCompletedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProphciesCompletedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProphecyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProphecyInfo = append(m.ProphecyInfo, &types.ProphecyInfo{})
			if err := m.ProphecyInfo[len(m.ProphecyInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEthereumLockBurnNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEthereumLockBurnNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEthereumLockBurnNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEthereumLockBurnNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEthereumLockBurnNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEthereumLockBurnNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumLockBurnNonce", wireType)
			}
			m.EthereumLockBurnNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthereumLockBurnNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWitnessLockBurnNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWitnessLockBurnNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWitnessLockBurnNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWitnessLockBurnNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWitnessLockBurnNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWitnessLockBurnNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessLockBurnNonce", wireType)
			}
			m.WitnessLockBurnNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WitnessLockBurnNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

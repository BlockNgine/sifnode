// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sifnode/ethbridge/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/Sifchain/sifnode/x/oracle/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenMetadataAddRequest struct {
	CosmosSender string         `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	Metadata     *TokenMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" yaml:"metadata"`
}

func (m *TokenMetadataAddRequest) Reset()         { *m = TokenMetadataAddRequest{} }
func (m *TokenMetadataAddRequest) String() string { return proto.CompactTextString(m) }
func (*TokenMetadataAddRequest) ProtoMessage()    {}
func (*TokenMetadataAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{0}
}
func (m *TokenMetadataAddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetadataAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMetadataAddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMetadataAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetadataAddRequest.Merge(m, src)
}
func (m *TokenMetadataAddRequest) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetadataAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetadataAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetadataAddRequest proto.InternalMessageInfo

func (m *TokenMetadataAddRequest) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *TokenMetadataAddRequest) GetMetadata() *TokenMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TokenMetadataAddResponse struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"token_denom"`
}

func (m *TokenMetadataAddResponse) Reset()         { *m = TokenMetadataAddResponse{} }
func (m *TokenMetadataAddResponse) String() string { return proto.CompactTextString(m) }
func (*TokenMetadataAddResponse) ProtoMessage()    {}
func (*TokenMetadataAddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{1}
}
func (m *TokenMetadataAddResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetadataAddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMetadataAddResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMetadataAddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetadataAddResponse.Merge(m, src)
}
func (m *TokenMetadataAddResponse) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetadataAddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetadataAddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetadataAddResponse proto.InternalMessageInfo

func (m *TokenMetadataAddResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type TokenMetadataDeleteRequest struct {
	CosmosSender string `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty" yaml:"token_denom"`
}

func (m *TokenMetadataDeleteRequest) Reset()         { *m = TokenMetadataDeleteRequest{} }
func (m *TokenMetadataDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*TokenMetadataDeleteRequest) ProtoMessage()    {}
func (*TokenMetadataDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{2}
}
func (m *TokenMetadataDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetadataDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMetadataDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMetadataDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetadataDeleteRequest.Merge(m, src)
}
func (m *TokenMetadataDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetadataDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetadataDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetadataDeleteRequest proto.InternalMessageInfo

func (m *TokenMetadataDeleteRequest) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *TokenMetadataDeleteRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type TokenMetadataDeleteResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty" yaml:"token_deleted"`
}

func (m *TokenMetadataDeleteResponse) Reset()         { *m = TokenMetadataDeleteResponse{} }
func (m *TokenMetadataDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*TokenMetadataDeleteResponse) ProtoMessage()    {}
func (*TokenMetadataDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{3}
}
func (m *TokenMetadataDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetadataDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMetadataDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMetadataDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetadataDeleteResponse.Merge(m, src)
}
func (m *TokenMetadataDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetadataDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetadataDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetadataDeleteResponse proto.InternalMessageInfo

func (m *TokenMetadataDeleteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// MsgLock defines a message for locking coins and triggering a related event
type MsgLock struct {
	CosmosSender      string                                 `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	Amount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Symbol            string                                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
	NetworkDescriptor types.NetworkDescriptor                `protobuf:"varint,4,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty" yaml:"network_descriptor"`
	EthereumReceiver  string                                 `protobuf:"bytes,5,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty" yaml:"ethereum_receiver"`
	CrosschainFee     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=crosschain_fee,json=crosschainFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"crosschain_fee" yaml:"crosschain_fee"`
}

func (m *MsgLock) Reset()         { *m = MsgLock{} }
func (m *MsgLock) String() string { return proto.CompactTextString(m) }
func (*MsgLock) ProtoMessage()    {}
func (*MsgLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{4}
}
func (m *MsgLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLock.Merge(m, src)
}
func (m *MsgLock) XXX_Size() int {
	return m.Size()
}
func (m *MsgLock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLock proto.InternalMessageInfo

func (m *MsgLock) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgLock) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgLock) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *MsgLock) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

type MsgLockResponse struct {
}

func (m *MsgLockResponse) Reset()         { *m = MsgLockResponse{} }
func (m *MsgLockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLockResponse) ProtoMessage()    {}
func (*MsgLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{5}
}
func (m *MsgLockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLockResponse.Merge(m, src)
}
func (m *MsgLockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLockResponse proto.InternalMessageInfo

// MsgBurn defines a message for burning coins and triggering a related event
type MsgBurn struct {
	CosmosSender      string                                 `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty" yaml:"cosmos_sender"`
	Amount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Symbol            string                                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
	NetworkDescriptor types.NetworkDescriptor                `protobuf:"varint,4,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty" yaml:"network_descriptor"`
	EthereumReceiver  string                                 `protobuf:"bytes,5,opt,name=ethereum_receiver,json=ethereumReceiver,proto3" json:"ethereum_receiver,omitempty" yaml:"ethereum_receiver"`
	CrosschainFee     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=crosschain_fee,json=crosschainFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"crosschain_fee" yaml:"crosschain_fee"`
}

func (m *MsgBurn) Reset()         { *m = MsgBurn{} }
func (m *MsgBurn) String() string { return proto.CompactTextString(m) }
func (*MsgBurn) ProtoMessage()    {}
func (*MsgBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{6}
}
func (m *MsgBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurn.Merge(m, src)
}
func (m *MsgBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurn proto.InternalMessageInfo

func (m *MsgBurn) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgBurn) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgBurn) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *MsgBurn) GetEthereumReceiver() string {
	if m != nil {
		return m.EthereumReceiver
	}
	return ""
}

type MsgBurnResponse struct {
}

func (m *MsgBurnResponse) Reset()         { *m = MsgBurnResponse{} }
func (m *MsgBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnResponse) ProtoMessage()    {}
func (*MsgBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{7}
}
func (m *MsgBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnResponse.Merge(m, src)
}
func (m *MsgBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnResponse proto.InternalMessageInfo

type MsgCreateEthBridgeClaim struct {
	EthBridgeClaim *EthBridgeClaim `protobuf:"bytes,1,opt,name=eth_bridge_claim,json=ethBridgeClaim,proto3" json:"eth_bridge_claim,omitempty" yaml:"eth_bridge_claim"`
}

func (m *MsgCreateEthBridgeClaim) Reset()         { *m = MsgCreateEthBridgeClaim{} }
func (m *MsgCreateEthBridgeClaim) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEthBridgeClaim) ProtoMessage()    {}
func (*MsgCreateEthBridgeClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{8}
}
func (m *MsgCreateEthBridgeClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEthBridgeClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEthBridgeClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEthBridgeClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEthBridgeClaim.Merge(m, src)
}
func (m *MsgCreateEthBridgeClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEthBridgeClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEthBridgeClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEthBridgeClaim proto.InternalMessageInfo

func (m *MsgCreateEthBridgeClaim) GetEthBridgeClaim() *EthBridgeClaim {
	if m != nil {
		return m.EthBridgeClaim
	}
	return nil
}

type MsgCreateEthBridgeClaimResponse struct {
}

func (m *MsgCreateEthBridgeClaimResponse) Reset()         { *m = MsgCreateEthBridgeClaimResponse{} }
func (m *MsgCreateEthBridgeClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEthBridgeClaimResponse) ProtoMessage()    {}
func (*MsgCreateEthBridgeClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{9}
}
func (m *MsgCreateEthBridgeClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEthBridgeClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEthBridgeClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEthBridgeClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEthBridgeClaimResponse.Merge(m, src)
}
func (m *MsgCreateEthBridgeClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEthBridgeClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEthBridgeClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEthBridgeClaimResponse proto.InternalMessageInfo

// MsgUpdateWhiteListValidator add or remove validator from whitelist
type MsgUpdateWhiteListValidator struct {
	NetworkDescriptor types.NetworkDescriptor `protobuf:"varint,1,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty" yaml:"network_descriptor"`
	CosmosSender      string                  `protobuf:"bytes,2,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty" yaml:"cosmos_sender"`
	Validator         string                  `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty" yaml:"validator"`
	Power             uint32                  `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *MsgUpdateWhiteListValidator) Reset()         { *m = MsgUpdateWhiteListValidator{} }
func (m *MsgUpdateWhiteListValidator) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWhiteListValidator) ProtoMessage()    {}
func (*MsgUpdateWhiteListValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{10}
}
func (m *MsgUpdateWhiteListValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWhiteListValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWhiteListValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWhiteListValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWhiteListValidator.Merge(m, src)
}
func (m *MsgUpdateWhiteListValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWhiteListValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWhiteListValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWhiteListValidator proto.InternalMessageInfo

func (m *MsgUpdateWhiteListValidator) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *MsgUpdateWhiteListValidator) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgUpdateWhiteListValidator) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgUpdateWhiteListValidator) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

type MsgUpdateWhiteListValidatorResponse struct {
}

func (m *MsgUpdateWhiteListValidatorResponse) Reset()         { *m = MsgUpdateWhiteListValidatorResponse{} }
func (m *MsgUpdateWhiteListValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWhiteListValidatorResponse) ProtoMessage()    {}
func (*MsgUpdateWhiteListValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{11}
}
func (m *MsgUpdateWhiteListValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWhiteListValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWhiteListValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWhiteListValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWhiteListValidatorResponse.Merge(m, src)
}
func (m *MsgUpdateWhiteListValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWhiteListValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWhiteListValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWhiteListValidatorResponse proto.InternalMessageInfo

type MsgUpdateCrossChainFeeReceiverAccount struct {
	CosmosSender          string `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	CrosschainFeeReceiver string `protobuf:"bytes,2,opt,name=crosschain_fee_receiver,json=crosschainFeeReceiver,proto3" json:"crosschain_fee_receiver,omitempty"`
}

func (m *MsgUpdateCrossChainFeeReceiverAccount) Reset()         { *m = MsgUpdateCrossChainFeeReceiverAccount{} }
func (m *MsgUpdateCrossChainFeeReceiverAccount) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrossChainFeeReceiverAccount) ProtoMessage()    {}
func (*MsgUpdateCrossChainFeeReceiverAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{12}
}
func (m *MsgUpdateCrossChainFeeReceiverAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrossChainFeeReceiverAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrossChainFeeReceiverAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccount.Merge(m, src)
}
func (m *MsgUpdateCrossChainFeeReceiverAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrossChainFeeReceiverAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccount proto.InternalMessageInfo

func (m *MsgUpdateCrossChainFeeReceiverAccount) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgUpdateCrossChainFeeReceiverAccount) GetCrosschainFeeReceiver() string {
	if m != nil {
		return m.CrosschainFeeReceiver
	}
	return ""
}

type MsgUpdateCrossChainFeeReceiverAccountResponse struct {
}

func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) Reset() {
	*m = MsgUpdateCrossChainFeeReceiverAccountResponse{}
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateCrossChainFeeReceiverAccountResponse) ProtoMessage() {}
func (*MsgUpdateCrossChainFeeReceiverAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{13}
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccountResponse.Merge(m, src)
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrossChainFeeReceiverAccountResponse proto.InternalMessageInfo

type MsgRescueCrossChainFee struct {
	CosmosSender        string                                 `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	CosmosReceiver      string                                 `protobuf:"bytes,2,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	CrosschainFeeSymbol string                                 `protobuf:"bytes,3,opt,name=crosschain_fee_symbol,json=crosschainFeeSymbol,proto3" json:"crosschain_fee_symbol,omitempty"`
	CrosschainFee       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=crosschain_fee,json=crosschainFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"crosschain_fee"`
}

func (m *MsgRescueCrossChainFee) Reset()         { *m = MsgRescueCrossChainFee{} }
func (m *MsgRescueCrossChainFee) String() string { return proto.CompactTextString(m) }
func (*MsgRescueCrossChainFee) ProtoMessage()    {}
func (*MsgRescueCrossChainFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{14}
}
func (m *MsgRescueCrossChainFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRescueCrossChainFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRescueCrossChainFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRescueCrossChainFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRescueCrossChainFee.Merge(m, src)
}
func (m *MsgRescueCrossChainFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgRescueCrossChainFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRescueCrossChainFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRescueCrossChainFee proto.InternalMessageInfo

func (m *MsgRescueCrossChainFee) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgRescueCrossChainFee) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *MsgRescueCrossChainFee) GetCrosschainFeeSymbol() string {
	if m != nil {
		return m.CrosschainFeeSymbol
	}
	return ""
}

type MsgRescueCrossChainFeeResponse struct {
}

func (m *MsgRescueCrossChainFeeResponse) Reset()         { *m = MsgRescueCrossChainFeeResponse{} }
func (m *MsgRescueCrossChainFeeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRescueCrossChainFeeResponse) ProtoMessage()    {}
func (*MsgRescueCrossChainFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{15}
}
func (m *MsgRescueCrossChainFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRescueCrossChainFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRescueCrossChainFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRescueCrossChainFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRescueCrossChainFeeResponse.Merge(m, src)
}
func (m *MsgRescueCrossChainFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRescueCrossChainFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRescueCrossChainFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRescueCrossChainFeeResponse proto.InternalMessageInfo

type MsgSetFeeInfo struct {
	CosmosSender      string                                 `protobuf:"bytes,1,opt,name=cosmos_sender,json=cosmosSender,proto3" json:"cosmos_sender,omitempty"`
	NetworkDescriptor types.NetworkDescriptor                `protobuf:"varint,2,opt,name=network_descriptor,json=networkDescriptor,proto3,enum=sifnode.oracle.v1.NetworkDescriptor" json:"network_descriptor,omitempty" yaml:"network_descriptor"`
	FeeCurrency       string                                 `protobuf:"bytes,3,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	FeeCurrencyGas    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=fee_currency_gas,json=feeCurrencyGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_currency_gas" yaml:"fee_currency_gas"`
	MinimumLockCost   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=minimum_lock_cost,json=minimumLockCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_lock_cost" yaml:"minimum_lock_cost"`
	MinimumBurnCost   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=minimum_burn_cost,json=minimumBurnCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_burn_cost" yaml:"minimum_burn_cost"`
}

func (m *MsgSetFeeInfo) Reset()         { *m = MsgSetFeeInfo{} }
func (m *MsgSetFeeInfo) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeeInfo) ProtoMessage()    {}
func (*MsgSetFeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{16}
}
func (m *MsgSetFeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeeInfo.Merge(m, src)
}
func (m *MsgSetFeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeeInfo proto.InternalMessageInfo

func (m *MsgSetFeeInfo) GetCosmosSender() string {
	if m != nil {
		return m.CosmosSender
	}
	return ""
}

func (m *MsgSetFeeInfo) GetNetworkDescriptor() types.NetworkDescriptor {
	if m != nil {
		return m.NetworkDescriptor
	}
	return types.NetworkDescriptor_NETWORK_DESCRIPTOR_UNSPECIFIED
}

func (m *MsgSetFeeInfo) GetFeeCurrency() string {
	if m != nil {
		return m.FeeCurrency
	}
	return ""
}

type MsgSetFeeInfoResponse struct {
}

func (m *MsgSetFeeInfoResponse) Reset()         { *m = MsgSetFeeInfoResponse{} }
func (m *MsgSetFeeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeeInfoResponse) ProtoMessage()    {}
func (*MsgSetFeeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d60f3dabe1980f, []int{17}
}
func (m *MsgSetFeeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeeInfoResponse.Merge(m, src)
}
func (m *MsgSetFeeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeeInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TokenMetadataAddRequest)(nil), "sifnode.ethbridge.v1.TokenMetadataAddRequest")
	proto.RegisterType((*TokenMetadataAddResponse)(nil), "sifnode.ethbridge.v1.TokenMetadataAddResponse")
	proto.RegisterType((*TokenMetadataDeleteRequest)(nil), "sifnode.ethbridge.v1.TokenMetadataDeleteRequest")
	proto.RegisterType((*TokenMetadataDeleteResponse)(nil), "sifnode.ethbridge.v1.TokenMetadataDeleteResponse")
	proto.RegisterType((*MsgLock)(nil), "sifnode.ethbridge.v1.MsgLock")
	proto.RegisterType((*MsgLockResponse)(nil), "sifnode.ethbridge.v1.MsgLockResponse")
	proto.RegisterType((*MsgBurn)(nil), "sifnode.ethbridge.v1.MsgBurn")
	proto.RegisterType((*MsgBurnResponse)(nil), "sifnode.ethbridge.v1.MsgBurnResponse")
	proto.RegisterType((*MsgCreateEthBridgeClaim)(nil), "sifnode.ethbridge.v1.MsgCreateEthBridgeClaim")
	proto.RegisterType((*MsgCreateEthBridgeClaimResponse)(nil), "sifnode.ethbridge.v1.MsgCreateEthBridgeClaimResponse")
	proto.RegisterType((*MsgUpdateWhiteListValidator)(nil), "sifnode.ethbridge.v1.MsgUpdateWhiteListValidator")
	proto.RegisterType((*MsgUpdateWhiteListValidatorResponse)(nil), "sifnode.ethbridge.v1.MsgUpdateWhiteListValidatorResponse")
	proto.RegisterType((*MsgUpdateCrossChainFeeReceiverAccount)(nil), "sifnode.ethbridge.v1.MsgUpdateCrossChainFeeReceiverAccount")
	proto.RegisterType((*MsgUpdateCrossChainFeeReceiverAccountResponse)(nil), "sifnode.ethbridge.v1.MsgUpdateCrossChainFeeReceiverAccountResponse")
	proto.RegisterType((*MsgRescueCrossChainFee)(nil), "sifnode.ethbridge.v1.MsgRescueCrossChainFee")
	proto.RegisterType((*MsgRescueCrossChainFeeResponse)(nil), "sifnode.ethbridge.v1.MsgRescueCrossChainFeeResponse")
	proto.RegisterType((*MsgSetFeeInfo)(nil), "sifnode.ethbridge.v1.MsgSetFeeInfo")
	proto.RegisterType((*MsgSetFeeInfoResponse)(nil), "sifnode.ethbridge.v1.MsgSetFeeInfoResponse")
}

func init() { proto.RegisterFile("sifnode/ethbridge/v1/tx.proto", fileDescriptor_44d60f3dabe1980f) }

var fileDescriptor_44d60f3dabe1980f = []byte{
	// 1154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0xaf, 0xfb, 0x6b, 0xbb, 0xaf, 0xdb, 0x5f, 0x6e, 0xba, 0xcd, 0xd7, 0xfd, 0x36, 0xee, 0x4e,
	0x29, 0x14, 0xd8, 0x26, 0x34, 0xfc, 0x90, 0x00, 0x21, 0xb4, 0xc9, 0xb2, 0xa5, 0xa8, 0x41, 0xc2,
	0xdd, 0x65, 0x25, 0x0e, 0x44, 0xae, 0x3d, 0x75, 0xac, 0xc4, 0x9e, 0xac, 0x67, 0xd2, 0xdd, 0x22,
	0x8e, 0x08, 0x71, 0xe4, 0xc0, 0x09, 0x89, 0x2b, 0x67, 0xfe, 0x8c, 0x3d, 0xee, 0x11, 0x71, 0x88,
	0xa0, 0xfd, 0x0b, 0xc8, 0x95, 0x0b, 0xb2, 0x67, 0x32, 0x89, 0x13, 0xa7, 0xc4, 0x82, 0xbd, 0x20,
	0x4e, 0x6d, 0xde, 0x7c, 0xde, 0xe7, 0xbd, 0x79, 0xf3, 0x79, 0x6f, 0x6c, 0xc3, 0x26, 0x75, 0x4f,
	0x7d, 0x62, 0xe3, 0x02, 0x66, 0xb5, 0x93, 0xc0, 0xb5, 0x1d, 0x5c, 0x38, 0xdb, 0x2f, 0xb0, 0x27,
	0xf9, 0x66, 0x40, 0x18, 0x51, 0x33, 0x62, 0x39, 0x2f, 0x97, 0xf3, 0x67, 0xfb, 0x5a, 0xc6, 0x21,
	0x0e, 0x89, 0x00, 0x85, 0xf0, 0x3f, 0x8e, 0xd5, 0xb6, 0x92, 0xa9, 0xce, 0x9b, 0x98, 0x0a, 0xc4,
	0x2b, 0x5d, 0x04, 0x09, 0x4c, 0xab, 0x11, 0x2d, 0xfb, 0x98, 0x3d, 0x26, 0x41, 0xbd, 0x6a, 0x63,
	0x6a, 0x05, 0x6e, 0x93, 0x91, 0x80, 0x63, 0xd1, 0x77, 0x0a, 0xac, 0xdf, 0x27, 0x75, 0xec, 0x57,
	0x30, 0x33, 0x6d, 0x93, 0x99, 0x77, 0x6c, 0xdb, 0xc0, 0x8f, 0x5a, 0x98, 0x32, 0x75, 0x1b, 0x16,
	0x2c, 0x42, 0x3d, 0x42, 0xab, 0x14, 0xfb, 0x36, 0x0e, 0xb2, 0xca, 0x96, 0xb2, 0x7b, 0xdd, 0xb8,
	0xc1, 0x8d, 0xc7, 0x91, 0x4d, 0xbd, 0x0f, 0x73, 0x9e, 0x70, 0xcd, 0x4e, 0x6e, 0x29, 0xbb, 0xf3,
	0xc5, 0xed, 0x7c, 0xd2, 0x6e, 0xf2, 0xb1, 0x28, 0xa5, 0xd5, 0x4e, 0x5b, 0x5f, 0x3a, 0x37, 0xbd,
	0xc6, 0x3b, 0xa8, 0xeb, 0x8e, 0x0c, 0xc9, 0x84, 0x3e, 0x84, 0xec, 0x70, 0x56, 0xb4, 0x49, 0x7c,
	0x8a, 0xd5, 0xdb, 0x30, 0x63, 0x63, 0x9f, 0x78, 0x3c, 0x9d, 0xd2, 0xcd, 0x4e, 0x5b, 0x57, 0x39,
	0x13, 0x0b, 0x5d, 0xaa, 0xd1, 0x22, 0x32, 0x38, 0x08, 0x11, 0xd0, 0x62, 0x4c, 0x77, 0x71, 0x03,
	0x33, 0x9c, 0x6a, 0x8b, 0x32, 0xe0, 0xe4, 0x38, 0x01, 0x3f, 0x81, 0x8d, 0xc4, 0x80, 0x22, 0xfb,
	0x22, 0x5c, 0xa3, 0x2d, 0xcb, 0xc2, 0x94, 0x46, 0xb1, 0xe6, 0x4a, 0xd9, 0x4e, 0x5b, 0xcf, 0xc4,
	0xe9, 0x42, 0x07, 0x1b, 0x19, 0x5d, 0x20, 0xfa, 0x6d, 0x0a, 0xae, 0x55, 0xa8, 0x73, 0x44, 0xac,
	0xfa, 0x78, 0x19, 0x3f, 0x84, 0x59, 0xd3, 0x23, 0x2d, 0x9f, 0x89, 0x94, 0xdf, 0x7f, 0xda, 0xd6,
	0x27, 0x7e, 0x69, 0xeb, 0x2f, 0x3a, 0x2e, 0xab, 0xb5, 0x4e, 0xf2, 0x16, 0xf1, 0x0a, 0xdc, 0x41,
	0xfc, 0xd9, 0xa3, 0x76, 0x5d, 0x68, 0xe8, 0xd0, 0x67, 0x9d, 0xb6, 0xbe, 0xc0, 0x33, 0xe2, 0x2c,
	0xc8, 0x10, 0x74, 0xea, 0xcb, 0x30, 0x4b, 0xcf, 0xbd, 0x13, 0xd2, 0xc8, 0x4e, 0x45, 0xc4, 0x2b,
	0x3d, 0x28, 0xb7, 0x23, 0x43, 0x00, 0xd4, 0x00, 0xd4, 0x61, 0xd5, 0x65, 0xa7, 0xb7, 0x94, 0xdd,
	0xc5, 0xe2, 0x0b, 0x52, 0x22, 0x5c, 0xa2, 0xa1, 0x3e, 0x3e, 0xe6, 0xe0, 0xbb, 0x12, 0x5b, 0xda,
	0xec, 0xb4, 0xf5, 0xff, 0x71, 0xf2, 0x61, 0x26, 0x64, 0xac, 0xf8, 0x83, 0x1e, 0xea, 0x21, 0xac,
	0x60, 0x56, 0xc3, 0x01, 0x6e, 0x79, 0xd5, 0x00, 0x5b, 0xd8, 0x3d, 0xc3, 0x41, 0x76, 0x26, 0xca,
	0xf4, 0xff, 0x9d, 0xb6, 0x9e, 0xe5, 0x64, 0x43, 0x10, 0x64, 0x2c, 0x77, 0x6d, 0x86, 0x30, 0xa9,
	0x3e, 0x2c, 0x5a, 0x01, 0xa1, 0xd4, 0xaa, 0x99, 0xae, 0x5f, 0x3d, 0xc5, 0x38, 0x3b, 0x1b, 0xf1,
	0x1c, 0xa4, 0x2e, 0xe5, 0x1a, 0x8f, 0x1a, 0x67, 0x43, 0xc6, 0x42, 0xcf, 0x70, 0x0f, 0x63, 0xb4,
	0x02, 0x4b, 0xe2, 0x88, 0xbb, 0x52, 0x41, 0x7f, 0xf0, 0x63, 0x2f, 0xb5, 0x02, 0x5f, 0x7d, 0x2f,
	0xf1, 0xd8, 0xfb, 0xc5, 0x13, 0x5b, 0x46, 0xff, 0x09, 0xe2, 0xdf, 0x21, 0x88, 0xf0, 0xf0, 0xa5,
	0x20, 0xbe, 0x56, 0x60, 0xbd, 0x42, 0x9d, 0x72, 0x80, 0x4d, 0x86, 0x3f, 0x60, 0xb5, 0x52, 0x34,
	0x5c, 0xcb, 0x0d, 0xd3, 0xf5, 0xd4, 0x3a, 0x84, 0x29, 0x57, 0xf9, 0xbc, 0xad, 0x5a, 0xa1, 0x2d,
	0xd2, 0xc8, 0x7c, 0x5f, 0x6d, 0x63, 0xf3, 0x38, 0xee, 0x5f, 0xda, 0xe8, 0xb4, 0xf5, 0x75, 0x59,
	0x8e, 0x18, 0x0f, 0x32, 0x16, 0x71, 0x0c, 0x8c, 0x6e, 0x81, 0x3e, 0x22, 0x0f, 0x99, 0xeb, 0xf7,
	0x93, 0xb0, 0x51, 0xa1, 0xce, 0x83, 0xa6, 0x6d, 0x32, 0xfc, 0xb0, 0xe6, 0x32, 0x7c, 0xe4, 0x52,
	0xf6, 0xa9, 0xd9, 0x70, 0x6d, 0x33, 0x3c, 0x99, 0x64, 0x35, 0x28, 0xcf, 0x55, 0x0d, 0x43, 0x4d,
	0x34, 0x99, 0xaa, 0x89, 0x8a, 0x70, 0xfd, 0xac, 0x9b, 0xbf, 0x90, 0x7b, 0xa6, 0xd3, 0xd6, 0x97,
	0xb9, 0xab, 0x5c, 0x42, 0x46, 0x0f, 0xa6, 0x66, 0x60, 0xa6, 0x49, 0x1e, 0x63, 0xae, 0xf3, 0x05,
	0x83, 0xff, 0x40, 0x3b, 0xb0, 0x7d, 0x45, 0x6d, 0x64, 0x0d, 0xbf, 0x52, 0x60, 0x47, 0xe2, 0xca,
	0xa1, 0x3a, 0xca, 0x42, 0x1d, 0x5d, 0x55, 0xde, 0xb1, 0xac, 0xa8, 0x0d, 0xc7, 0xba, 0x15, 0xde,
	0x82, 0xf5, 0xb8, 0xe6, 0x7a, 0x2d, 0x11, 0x15, 0xc2, 0x58, 0x8b, 0x29, 0xb0, 0x1b, 0x03, 0x15,
	0x60, 0x6f, 0xac, 0x2c, 0x64, 0xde, 0xbf, 0x2b, 0x70, 0xb3, 0x42, 0x1d, 0x03, 0x53, 0xab, 0x15,
	0xf7, 0x18, 0x2f, 0xd1, 0x97, 0x60, 0x49, 0x80, 0x06, 0x12, 0x5c, 0xe4, 0x66, 0xd9, 0x93, 0x45,
	0x58, 0x1b, 0xd8, 0x51, 0xff, 0x30, 0x32, 0x56, 0x63, 0xfb, 0x39, 0xe6, 0x63, 0xe8, 0xc1, 0x50,
	0x1f, 0x4f, 0x47, 0x47, 0x99, 0x4f, 0xd7, 0xc7, 0x83, 0xed, 0xba, 0x05, 0xb9, 0xe4, 0x2d, 0xcb,
	0xaa, 0xfc, 0x34, 0x0d, 0x0b, 0x15, 0xea, 0x1c, 0x63, 0x76, 0x0f, 0xe3, 0x43, 0xff, 0x94, 0x8c,
	0x57, 0x8c, 0xe4, 0x46, 0x99, 0x7c, 0xae, 0x8d, 0x72, 0x0b, 0x6e, 0x84, 0xc5, 0xb4, 0x5a, 0x41,
	0x80, 0x7d, 0xeb, 0x5c, 0x94, 0x73, 0xfe, 0x14, 0xe3, 0xb2, 0x30, 0xa9, 0x14, 0x96, 0xfb, 0x21,
	0x55, 0xc7, 0xa4, 0xa2, 0x90, 0x87, 0xa9, 0x07, 0xa2, 0x98, 0x3b, 0x83, 0x7c, 0xc8, 0x58, 0xec,
	0x8b, 0x78, 0x60, 0x52, 0xf5, 0x0c, 0x56, 0x3c, 0xd7, 0x77, 0xbd, 0x96, 0x57, 0x6d, 0x10, 0xab,
	0x5e, 0xb5, 0x08, 0x65, 0x62, 0x9c, 0x7f, 0x94, 0x3a, 0xaa, 0x18, 0xfe, 0x43, 0x84, 0xc8, 0x58,
	0x12, 0xb6, 0xf0, 0x36, 0x2e, 0x13, 0xca, 0xfa, 0xe3, 0x9e, 0xb4, 0x02, 0x9f, 0xc7, 0x9d, 0xfd,
	0x67, 0xe2, 0x4a, 0xc2, 0x5e, 0xdc, 0x70, 0xe8, 0x87, 0x71, 0xd1, 0x3a, 0xac, 0xc5, 0x14, 0xd3,
	0xd5, 0x52, 0xf1, 0x87, 0x39, 0x98, 0xaa, 0x50, 0x47, 0x3d, 0x82, 0xe9, 0xe8, 0xa9, 0x70, 0x33,
	0x79, 0xc6, 0x8b, 0x27, 0x0a, 0x6d, 0xe7, 0xca, 0x65, 0xf9, 0x6c, 0x7a, 0x04, 0xd3, 0xd1, 0xc3,
	0xc6, 0x68, 0xb6, 0x70, 0xf9, 0x0a, 0xb6, 0xfe, 0xdb, 0x4a, 0xfd, 0x12, 0x32, 0x89, 0x37, 0xd5,
	0xde, 0x48, 0xf7, 0x24, 0xb8, 0xf6, 0x66, 0x2a, 0xb8, 0x8c, 0xfe, 0x8d, 0x02, 0xd9, 0x91, 0x97,
	0xcf, 0xfe, 0x48, 0xce, 0x51, 0x2e, 0xda, 0xdb, 0xa9, 0x5d, 0x64, 0x2a, 0x3f, 0x2a, 0x80, 0xc6,
	0x98, 0xe1, 0xef, 0xfe, 0x45, 0x84, 0xab, 0x9c, 0xb5, 0xf2, 0xdf, 0x70, 0x96, 0x89, 0x9e, 0xc3,
	0x6a, 0xd2, 0xcc, 0xbe, 0x3d, 0x92, 0x3b, 0x01, 0xad, 0xbd, 0x91, 0x06, 0x2d, 0x43, 0x7f, 0x0e,
	0xd0, 0x3f, 0x18, 0x47, 0x72, 0xf4, 0x40, 0xda, 0xab, 0x63, 0x80, 0x24, 0xff, 0x23, 0x58, 0x1e,
	0x7c, 0xa1, 0x1c, 0x25, 0xc4, 0x11, 0xaf, 0xc3, 0x5a, 0x7e, 0x5c, 0xb8, 0x08, 0xf9, 0x05, 0xac,
	0x26, 0xbc, 0x08, 0xaa, 0xaf, 0x8d, 0x41, 0x13, 0x7b, 0x49, 0xd5, 0xf6, 0x53, 0x78, 0xf0, 0xd8,
	0xa5, 0x83, 0xa7, 0x17, 0x39, 0xe5, 0xd9, 0x45, 0x4e, 0xf9, 0xf5, 0x22, 0xa7, 0x7c, 0x7b, 0x99,
	0x9b, 0x78, 0x76, 0x99, 0x9b, 0xf8, 0xf9, 0x32, 0x37, 0xf1, 0xd9, 0x5e, 0xdf, 0x9c, 0x3a, 0x76,
	0x4f, 0xa3, 0xfb, 0xab, 0xd0, 0xfd, 0x60, 0xf0, 0xa4, 0xef, 0xa3, 0x42, 0x34, 0xb2, 0x4e, 0x66,
	0xa3, 0xcf, 0x04, 0xaf, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x55, 0x8b, 0xf5, 0xc1, 0x10,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Lock(ctx context.Context, in *MsgLock, opts ...grpc.CallOption) (*MsgLockResponse, error)
	Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error)
	CreateEthBridgeClaim(ctx context.Context, in *MsgCreateEthBridgeClaim, opts ...grpc.CallOption) (*MsgCreateEthBridgeClaimResponse, error)
	UpdateWhiteListValidator(ctx context.Context, in *MsgUpdateWhiteListValidator, opts ...grpc.CallOption) (*MsgUpdateWhiteListValidatorResponse, error)
	UpdateCrossChainFeeReceiverAccount(ctx context.Context, in *MsgUpdateCrossChainFeeReceiverAccount, opts ...grpc.CallOption) (*MsgUpdateCrossChainFeeReceiverAccountResponse, error)
	RescueCrossChainFee(ctx context.Context, in *MsgRescueCrossChainFee, opts ...grpc.CallOption) (*MsgRescueCrossChainFeeResponse, error)
	SetFeeInfo(ctx context.Context, in *MsgSetFeeInfo, opts ...grpc.CallOption) (*MsgSetFeeInfoResponse, error)
	TokenMetadataAdd(ctx context.Context, in *TokenMetadataAddRequest, opts ...grpc.CallOption) (*TokenMetadataAddResponse, error)
	TokenMetadataDelete(ctx context.Context, in *TokenMetadataDeleteRequest, opts ...grpc.CallOption) (*TokenMetadataDeleteResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Lock(ctx context.Context, in *MsgLock, opts ...grpc.CallOption) (*MsgLockResponse, error) {
	out := new(MsgLockResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateEthBridgeClaim(ctx context.Context, in *MsgCreateEthBridgeClaim, opts ...grpc.CallOption) (*MsgCreateEthBridgeClaimResponse, error) {
	out := new(MsgCreateEthBridgeClaimResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/CreateEthBridgeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateWhiteListValidator(ctx context.Context, in *MsgUpdateWhiteListValidator, opts ...grpc.CallOption) (*MsgUpdateWhiteListValidatorResponse, error) {
	out := new(MsgUpdateWhiteListValidatorResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/UpdateWhiteListValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCrossChainFeeReceiverAccount(ctx context.Context, in *MsgUpdateCrossChainFeeReceiverAccount, opts ...grpc.CallOption) (*MsgUpdateCrossChainFeeReceiverAccountResponse, error) {
	out := new(MsgUpdateCrossChainFeeReceiverAccountResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/UpdateCrossChainFeeReceiverAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RescueCrossChainFee(ctx context.Context, in *MsgRescueCrossChainFee, opts ...grpc.CallOption) (*MsgRescueCrossChainFeeResponse, error) {
	out := new(MsgRescueCrossChainFeeResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/RescueCrossChainFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFeeInfo(ctx context.Context, in *MsgSetFeeInfo, opts ...grpc.CallOption) (*MsgSetFeeInfoResponse, error) {
	out := new(MsgSetFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/SetFeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TokenMetadataAdd(ctx context.Context, in *TokenMetadataAddRequest, opts ...grpc.CallOption) (*TokenMetadataAddResponse, error) {
	out := new(TokenMetadataAddResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/TokenMetadataAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TokenMetadataDelete(ctx context.Context, in *TokenMetadataDeleteRequest, opts ...grpc.CallOption) (*TokenMetadataDeleteResponse, error) {
	out := new(TokenMetadataDeleteResponse)
	err := c.cc.Invoke(ctx, "/sifnode.ethbridge.v1.Msg/TokenMetadataDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Lock(context.Context, *MsgLock) (*MsgLockResponse, error)
	Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error)
	CreateEthBridgeClaim(context.Context, *MsgCreateEthBridgeClaim) (*MsgCreateEthBridgeClaimResponse, error)
	UpdateWhiteListValidator(context.Context, *MsgUpdateWhiteListValidator) (*MsgUpdateWhiteListValidatorResponse, error)
	UpdateCrossChainFeeReceiverAccount(context.Context, *MsgUpdateCrossChainFeeReceiverAccount) (*MsgUpdateCrossChainFeeReceiverAccountResponse, error)
	RescueCrossChainFee(context.Context, *MsgRescueCrossChainFee) (*MsgRescueCrossChainFeeResponse, error)
	SetFeeInfo(context.Context, *MsgSetFeeInfo) (*MsgSetFeeInfoResponse, error)
	TokenMetadataAdd(context.Context, *TokenMetadataAddRequest) (*TokenMetadataAddResponse, error)
	TokenMetadataDelete(context.Context, *TokenMetadataDeleteRequest) (*TokenMetadataDeleteResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Lock(ctx context.Context, req *MsgLock) (*MsgLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedMsgServer) Burn(ctx context.Context, req *MsgBurn) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (*UnimplementedMsgServer) CreateEthBridgeClaim(ctx context.Context, req *MsgCreateEthBridgeClaim) (*MsgCreateEthBridgeClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEthBridgeClaim not implemented")
}
func (*UnimplementedMsgServer) UpdateWhiteListValidator(ctx context.Context, req *MsgUpdateWhiteListValidator) (*MsgUpdateWhiteListValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhiteListValidator not implemented")
}
func (*UnimplementedMsgServer) UpdateCrossChainFeeReceiverAccount(ctx context.Context, req *MsgUpdateCrossChainFeeReceiverAccount) (*MsgUpdateCrossChainFeeReceiverAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrossChainFeeReceiverAccount not implemented")
}
func (*UnimplementedMsgServer) RescueCrossChainFee(ctx context.Context, req *MsgRescueCrossChainFee) (*MsgRescueCrossChainFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescueCrossChainFee not implemented")
}
func (*UnimplementedMsgServer) SetFeeInfo(ctx context.Context, req *MsgSetFeeInfo) (*MsgSetFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeeInfo not implemented")
}
func (*UnimplementedMsgServer) TokenMetadataAdd(ctx context.Context, req *TokenMetadataAddRequest) (*TokenMetadataAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenMetadataAdd not implemented")
}
func (*UnimplementedMsgServer) TokenMetadataDelete(ctx context.Context, req *TokenMetadataDeleteRequest) (*TokenMetadataDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenMetadataDelete not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Lock(ctx, req.(*MsgLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateEthBridgeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEthBridgeClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEthBridgeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/CreateEthBridgeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEthBridgeClaim(ctx, req.(*MsgCreateEthBridgeClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateWhiteListValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateWhiteListValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateWhiteListValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/UpdateWhiteListValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateWhiteListValidator(ctx, req.(*MsgUpdateWhiteListValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCrossChainFeeReceiverAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCrossChainFeeReceiverAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCrossChainFeeReceiverAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/UpdateCrossChainFeeReceiverAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCrossChainFeeReceiverAccount(ctx, req.(*MsgUpdateCrossChainFeeReceiverAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RescueCrossChainFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRescueCrossChainFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RescueCrossChainFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/RescueCrossChainFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RescueCrossChainFee(ctx, req.(*MsgRescueCrossChainFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFeeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/SetFeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFeeInfo(ctx, req.(*MsgSetFeeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TokenMetadataAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenMetadataAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TokenMetadataAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/TokenMetadataAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TokenMetadataAdd(ctx, req.(*TokenMetadataAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TokenMetadataDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenMetadataDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TokenMetadataDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sifnode.ethbridge.v1.Msg/TokenMetadataDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TokenMetadataDelete(ctx, req.(*TokenMetadataDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sifnode.ethbridge.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Msg_Lock_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
		{
			MethodName: "CreateEthBridgeClaim",
			Handler:    _Msg_CreateEthBridgeClaim_Handler,
		},
		{
			MethodName: "UpdateWhiteListValidator",
			Handler:    _Msg_UpdateWhiteListValidator_Handler,
		},
		{
			MethodName: "UpdateCrossChainFeeReceiverAccount",
			Handler:    _Msg_UpdateCrossChainFeeReceiverAccount_Handler,
		},
		{
			MethodName: "RescueCrossChainFee",
			Handler:    _Msg_RescueCrossChainFee_Handler,
		},
		{
			MethodName: "SetFeeInfo",
			Handler:    _Msg_SetFeeInfo_Handler,
		},
		{
			MethodName: "TokenMetadataAdd",
			Handler:    _Msg_TokenMetadataAdd_Handler,
		},
		{
			MethodName: "TokenMetadataDelete",
			Handler:    _Msg_TokenMetadataDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sifnode/ethbridge/v1/tx.proto",
}

func (m *TokenMetadataAddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetadataAddRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetadataAddRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenMetadataAddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetadataAddResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetadataAddResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenMetadataDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetadataDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetadataDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenMetadataDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetadataDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetadataDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CrosschainFee.Size()
		i -= size
		if _, err := m.CrosschainFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CrosschainFee.Size()
		i -= size
		if _, err := m.CrosschainFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.EthereumReceiver) > 0 {
		i -= len(m.EthereumReceiver)
		copy(dAtA[i:], m.EthereumReceiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthereumReceiver)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateEthBridgeClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEthBridgeClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEthBridgeClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthBridgeClaim != nil {
		{
			size, err := m.EthBridgeClaim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEthBridgeClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEthBridgeClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEthBridgeClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWhiteListValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWhiteListValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWhiteListValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWhiteListValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWhiteListValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWhiteListValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrossChainFeeReceiverAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrossChainFeeReceiverAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrossChainFeeReceiverAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrosschainFeeReceiver) > 0 {
		i -= len(m.CrosschainFeeReceiver)
		copy(dAtA[i:], m.CrosschainFeeReceiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrosschainFeeReceiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRescueCrossChainFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRescueCrossChainFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRescueCrossChainFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CrosschainFee.Size()
		i -= size
		if _, err := m.CrosschainFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.CrosschainFeeSymbol) > 0 {
		i -= len(m.CrosschainFeeSymbol)
		copy(dAtA[i:], m.CrosschainFeeSymbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrosschainFeeSymbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRescueCrossChainFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRescueCrossChainFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRescueCrossChainFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetFeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinimumBurnCost.Size()
		i -= size
		if _, err := m.MinimumBurnCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinimumLockCost.Size()
		i -= size
		if _, err := m.MinimumLockCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.FeeCurrencyGas.Size()
		i -= size
		if _, err := m.FeeCurrencyGas.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.FeeCurrency) > 0 {
		i -= len(m.FeeCurrency)
		copy(dAtA[i:], m.FeeCurrency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeeCurrency)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NetworkDescriptor != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NetworkDescriptor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CosmosSender) > 0 {
		i -= len(m.CosmosSender)
		copy(dAtA[i:], m.CosmosSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosSender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFeeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenMetadataAddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TokenMetadataAddResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TokenMetadataDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TokenMetadataDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTx(uint64(m.NetworkDescriptor))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CrosschainFee.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgLockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTx(uint64(m.NetworkDescriptor))
	}
	l = len(m.EthereumReceiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CrosschainFee.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateEthBridgeClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthBridgeClaim != nil {
		l = m.EthBridgeClaim.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateEthBridgeClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateWhiteListValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTx(uint64(m.NetworkDescriptor))
	}
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovTx(uint64(m.Power))
	}
	return n
}

func (m *MsgUpdateWhiteListValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCrossChainFeeReceiverAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrosschainFeeReceiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRescueCrossChainFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrosschainFeeSymbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CrosschainFee.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRescueCrossChainFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetFeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NetworkDescriptor != 0 {
		n += 1 + sovTx(uint64(m.NetworkDescriptor))
	}
	l = len(m.FeeCurrency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.FeeCurrencyGas.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinimumLockCost.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinimumBurnCost.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetFeeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenMetadataAddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetadataAddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetadataAddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &TokenMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMetadataAddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetadataAddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetadataAddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMetadataDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetadataDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetadataDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMetadataDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetadataDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetadataDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEthBridgeClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEthBridgeClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEthBridgeClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBridgeClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EthBridgeClaim == nil {
				m.EthBridgeClaim = &EthBridgeClaim{}
			}
			if err := m.EthBridgeClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEthBridgeClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEthBridgeClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEthBridgeClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWhiteListValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWhiteListValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWhiteListValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWhiteListValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWhiteListValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWhiteListValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrossChainFeeReceiverAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrossChainFeeReceiverAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrossChainFeeReceiverAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFeeReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainFeeReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrossChainFeeReceiverAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrossChainFeeReceiverAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrossChainFeeReceiverAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRescueCrossChainFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRescueCrossChainFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRescueCrossChainFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFeeSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainFeeSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRescueCrossChainFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRescueCrossChainFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRescueCrossChainFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkDescriptor", wireType)
			}
			m.NetworkDescriptor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkDescriptor |= types.NetworkDescriptor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCurrencyGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCurrencyGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLockCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumLockCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBurnCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumBurnCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
